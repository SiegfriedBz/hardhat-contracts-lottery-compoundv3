{
  "address": "0x2e5B66edbfD54286DA7beB730e40198373896cAc",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lotteryTicketPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_intervalWithdraw",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_initLTKAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_USDCAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_cometcUSDCv3Address",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__AdminWithdrawETHFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__CompoundAllowanceFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NeedToSendCorrectAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotOPEN_TO_PLAY",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__NotOPEN_TO_WITHDRAW",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__PlayerHas0Ticket",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_transferTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ltkAmount",
          "type": "uint256"
        }
      ],
      "name": "Lottery__PlayerLTKTransferToLotteryFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__PlayerWithdrawLotteryFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__TransferGainsToWinnerFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Lottery__UnAuthorized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_numberOfPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lotteryState",
          "type": "uint256"
        }
      ],
      "name": "Lottery__UpKeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "CompoundWithdrawRequestDone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "LotteryEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RandomWinnerRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SupplyCompoundDone",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timeToGetWinnerAddress",
          "type": "uint256"
        }
      ],
      "name": "SwitchToCalculatingWinnerAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timeToGetWinnerGains",
          "type": "uint256"
        }
      ],
      "name": "SwitchToCalculatingWinnerGains",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timeToPlay",
          "type": "uint256"
        }
      ],
      "name": "SwitchToOpenToPlay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "timeToWithDraw",
          "type": "uint256"
        }
      ],
      "name": "SwitchToOpenToWithDraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newWinner",
          "type": "address"
        }
      ],
      "name": "WinnerAddressPicked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newWinner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newPrize",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "winDate",
          "type": "uint256"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "adminApproveAndSupplyCompound",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminWithdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "checkData",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comet",
      "outputs": [
        {
          "internalType": "contract Comet",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEndPlayTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEndWithDrawTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIsFirstPlayer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryState",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryTicketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryUSDCBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLotteryUSDCBalanceOnCompound",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "balance",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNewWinnerPrize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_player",
          "type": "address"
        }
      ],
      "name": "getPlayerNumberOfTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalNumTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryToken",
      "outputs": [
        {
          "internalType": "contract LotteryToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdc",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFromLottery",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xed6633fa027f950f19d7f970f16d457852aed6aba1b21e3dbae4515ac8e01016",
  "receipt": {
    "to": null,
    "from": "0x98564E6aaE6B6e7461a9D3E7EBDb67C9bA049f56",
    "contractAddress": "0x2e5B66edbfD54286DA7beB730e40198373896cAc",
    "transactionIndex": 109,
    "gasUsed": "4503898",
    "logsBloom": "0x
    "blockHash": "0x4151da217f78b75ed600a9b32c2fb757344114b0b871597acdfa635929f844b6",
    "transactionHash": "0xed6633fa027f950f19d7f970f16d457852aed6aba1b21e3dbae4515ac8e01016",
    "logs": [
      {
        "transactionIndex": 109,
        "blockNumber": 7904589,
        "transactionHash": "0xed6633fa027f950f19d7f970f16d457852aed6aba1b21e3dbae4515ac8e01016",
        "address": "0x062D7AbEc076892e936BA9fFE84b61af31159c6a",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002e5b66edbfd54286da7beb730e40198373896cac"
        ],
        "data": "0x",
        "logIndex": 236,
        "blockHash": "0x4151da217f78b75ed600a9b32c2fb757344114b0b871597acdfa635929f844b6"
      },
      {
        "transactionIndex": 109,
        "blockNumber": 7904589,
        "transactionHash": "0xed6633fa027f950f19d7f970f16d457852aed6aba1b21e3dbae4515ac8e01016",
        "address": "0x062D7AbEc076892e936BA9fFE84b61af31159c6a",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002e5b66edbfd54286da7beb730e40198373896cac"
        ],
        "data": "0x00000000000000000000000000000000000000000000021e19e0c9bab2400000",
        "logIndex": 237,
        "blockHash": "0x4151da217f78b75ed600a9b32c2fb757344114b0b871597acdfa635929f844b6"
      }
    ],
    "blockNumber": 7904589,
    "cumulativeGasUsed": "25383821",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "1000000000000000",
    "10000000",
    "600",
    "300",
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "5772",
    "500000",
    "10000000000000000000000",
    "0x07865c6E87B9F70255377e024ace6630C1Eaa37F",
    "0x3EE77595A8459e93C2888b13aDB354017B198188"
  ],
  "numDeployments": 1,
  "solcInputHash": "009e35eca4de48d3c3afd241b59c5cef",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryTicketPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_intervalWithdraw\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_initLTKAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_USDCAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_cometcUSDCv3Address\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__AdminWithdrawETHFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__CompoundAllowanceFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NeedToSendCorrectAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotOPEN_TO_PLAY\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__NotOPEN_TO_WITHDRAW\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__PlayerHas0Ticket\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ltkAmount\",\"type\":\"uint256\"}],\"name\":\"Lottery__PlayerLTKTransferToLotteryFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__PlayerWithdrawLotteryFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__TransferGainsToWinnerFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Lottery__UnAuthorized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_numberOfPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lotteryState\",\"type\":\"uint256\"}],\"name\":\"Lottery__UpKeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CompoundWithdrawRequestDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"LotteryEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RandomWinnerRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SupplyCompoundDone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeToGetWinnerAddress\",\"type\":\"uint256\"}],\"name\":\"SwitchToCalculatingWinnerAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeToGetWinnerGains\",\"type\":\"uint256\"}],\"name\":\"SwitchToCalculatingWinnerGains\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeToPlay\",\"type\":\"uint256\"}],\"name\":\"SwitchToOpenToPlay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timeToWithDraw\",\"type\":\"uint256\"}],\"name\":\"SwitchToOpenToWithDraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newWinner\",\"type\":\"address\"}],\"name\":\"WinnerAddressPicked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWinner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newPrize\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"winDate\",\"type\":\"uint256\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"adminApproveAndSupplyCompound\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"checkData\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comet\",\"outputs\":[{\"internalType\":\"contract Comet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndPlayTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEndWithDrawTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIsFirstPlayer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryState\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryTicketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryUSDCBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLotteryUSDCBalanceOnCompound\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"balance\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNewWinnerPrize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_player\",\"type\":\"address\"}],\"name\":\"getPlayerNumberOfTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalNumTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryToken\",\"outputs\":[{\"internalType\":\"contract LotteryToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFromLottery\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"SiegfriedBz\",\"details\":\"This implements CompoundV3, and Chainlink VRF v2 & Chainlink Keeper (\\\"Automation\\\")\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"function called by the ChainLink Keeper (\\\"Automation\\\") nodes ChainLink Keeper look for \\\"upkeepNeeded\\\" to return true 3 possible paths -I. path 01 -- To return true the following is needed ---1. Lottery state == OPEN_TO_PLAY ---2. Lottery Time interval to Play has passed ---3. Lottery has >= 1player, and Lottery is funded ---4. ChainLink subscription has enough LINK -II. path 02 ---1. Lottery state == CALCULATING_WINNER_GAINS ---2. ---3. -II. path 03 -- To return true the following is needed ---1. Lottery state == OPEN_TO_WITHDRAW ---2. Lottery Time interval to WithDraw has Passed\"},\"performUpkeep(bytes)\":{\"details\":\"function called by the ChainLink Keeper (\\\"Automation\\\") nodes when checkUpkeep() returned true. 3 possible paths If upkeepNeeded is true: -I. from path 01: --I.1. Lottery calls Coumpound to transfer all available USDC => Lottery --I.2. update s_endPlayTime to prevent checkUpKeep path 01 to return true before next run --I.3. a request for randomness is made to ChainLink VRF --I.4. LotteryState switch => CALCULATING_WINNER_ADDRESS -II. from path 02: --II.1 --II.2 -III. from path 03: --III.1 LotteryState switch => OPEN_TO_PLAY --III.2 Supply Coumpound with ALL Lottery USDC balance to start generating interests\"}},\"title\":\"A sample No-Loss Lottery contract with CompoundV3 USDC Lending\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"adminApproveAndSupplyCompound()\":{\"notice\":\"function called by Admin, require Lottery state is OpenToPlay 1. called from front-end, first: Admin send USDC to Lottery 2. approve Compound for all current Lottery USDC balance 3. supply Compound with all current Lottery USDC balance\"},\"adminWithdrawETH()\":{\"notice\":\"function for Admin transfers Lottery ETH to Admin\"},\"enterLottery()\":{\"notice\":\"function called by Player note: this call contains 3 calls from front-end: 1. Player calls USDC contract to transfer i_lotteryTicketPrice USDC => Lottery 2. Player calls LTK contract to increase LTK allowance for Lottery. required for later Player call this.withdrawFromLottery() 3. Player calls Lottery to send i_lotteryFee ETH value => Lottery transfer 1 LTK Token to Player add Player to the players array add 1 ticket to Player playerToNumTickets mapping 3. internal call by Lottery: this.approveAndSupplyCompound()\"},\"getAdmin()\":{\"notice\":\"Getter returns the admin address\"},\"getEndPlayTime()\":{\"notice\":\"Getter for front end returns the current Lottery round endPlayTime\"},\"getEndWithDrawTime()\":{\"notice\":\"Getter for front end returns the current Lottery round endWithDrawTime\"},\"getInterval()\":{\"notice\":\"Getter for front end returns the Lottery round duration\"},\"getIsFirstPlayer()\":{\"notice\":\"Getter for front end\"},\"getLatestTimeStamp()\":{\"notice\":\"Getter for front end\"},\"getLotteryFee()\":{\"notice\":\"Getter for front end returns the entrance fee\"},\"getLotteryState()\":{\"notice\":\"Getter for front end\"},\"getLotteryTicketPrice()\":{\"notice\":\"Getter for front end returns the lottery Ticket Price\"},\"getLotteryUSDCBalance()\":{\"notice\":\"Getter returns the Lottery USDC current balance (available on Lottery)\"},\"getLotteryUSDCBalanceOnCompound()\":{\"notice\":\"Getter returns the Lottery USDC amount available on Compound\"},\"getNewWinnerPrize()\":{\"notice\":\"Getter for front end\"},\"getNumWords()\":{\"notice\":\"Getter for front end\"},\"getPlayerNumberOfTickets(address)\":{\"notice\":\"Getter returns the Player's number of tickets\"},\"getPlayers()\":{\"notice\":\"Getter for front end returns the players array\"},\"getRequestConfirmations()\":{\"notice\":\"Getter for front end\"},\"getTotalNumTickets()\":{\"notice\":\"Getter returns the total number of active tickets\"},\"getWinners()\":{\"notice\":\"Getter for front end returns the winners array\"},\"withdrawFromLottery()\":{\"notice\":\"function called by Player to withdraw its USDC from Lottery 1. Lottery call LotteryToken => transfer ALL Player's LTK to Lottery 2. Lottery call USDC => Transfer Player's due USDC from Lottery to Player 3. update totalNumTickets 4. reset Player mapping toNumTickets note: when this.withdrawfromCompound() is called, Lottery is in OPEN_TO_WITHDRAW state\"}},\"notice\":\"This contract is for creating an untamperable decentralized Lottery smart contractCompoundV3 to lend USDC and generate gainsChainlink VRF will pick a random numberChainlink Keeper has 2 roles: 1. will call the function to pick a Winner, when the Lottery is in OPEN_TO_PLAY state 2. will set the time during which Players can withdraw their funds, after a Lottery runPlayer can enter Lottery by: 1. transfering USDC (lotteryTicketPrice) to start lending 2. sending ETH (lotteryFee) to pay the LotteryPlayer gets 1 Lottery Token (LTK) by entering Lottery.When a Player withdraws its USDC, he transfers all its LTK to Lottery\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n/**\\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\\n */\\npragma solidity ^0.8.0;\\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \\\"./AutomationCompatibleInterface.sol\\\";\\n\",\"keccak256\":\"0xac76a31c20c6d66196247376d113a0f19229569ab8c123989649d50be3333e0a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nerror Lottery__UnAuthorized();\\nerror Lottery__NeedToSendCorrectAmount();\\nerror Lottery__TransferGainsToWinnerFailed();\\nerror Lottery__NotOPEN_TO_PLAY();\\nerror Lottery__UpKeepNotNeeded(\\n    uint256 _lotteryBalance,\\n    uint256 _numberOfPlayers,\\n    uint256 _lotteryState\\n);\\nerror Lottery__CompoundAllowanceFailed();\\nerror Lottery__NotOPEN_TO_WITHDRAW();\\nerror Lottery__PlayerHas0Ticket();\\nerror Lottery__PlayerLTKTransferToLotteryFailed(\\n    address _transferTo,\\n    uint256 _ltkAmount\\n);\\nerror Lottery__PlayerWithdrawLotteryFailed();\\nerror Lottery__AdminWithdrawETHFailed();\\nerror Lottery__AdminWithdrawUSDCFailed();\\nerror Lottery__AdminCanNotPerformMyUpkeep();\\n\\n// LotteryToken LTK ERC20 Mintable\\nimport \\\"./LotteryToken.sol\\\";\\n// Chainlink VRF v2 - Verifiable Random Function\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n// Chainlink Keeper - Automation\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n// USDC ERC20\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n// Compound V3\\nimport \\\"./interfaces/IComet.sol\\\";\\n\\n/** @title A sample No-Loss Lottery contract with CompoundV3 USDC Lending\\n * @author SiegfriedBz\\n * @notice This contract is for creating an untamperable decentralized Lottery smart contract\\n * @dev This implements CompoundV3, and Chainlink VRF v2 & Chainlink Keeper (\\\"Automation\\\")\\n * @notice CompoundV3 to lend USDC and generate gains\\n * @notice Chainlink VRF will pick a random number\\n * @notice Chainlink Keeper has 2 roles:\\n * 1. will call the function to pick a Winner, when the Lottery is in OPEN_TO_PLAY state\\n * 2. will set the time during which Players can withdraw their funds, after a Lottery run\\n * @notice Player can enter Lottery by:\\n * 1. transfering USDC (lotteryTicketPrice) to start lending\\n * 2. sending ETH (lotteryFee) to pay the Lottery\\n * @notice Player gets 1 Lottery Token (LTK) by entering Lottery.\\n * @notice When a Player withdraws its USDC, he transfers all its LTK to Lottery\\n */\\n\\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    /* Type Declaration */\\n    enum LotteryState {\\n        OPEN_TO_PLAY,\\n        CALCULATING_WINNER_ADDRESS, // requesting a random number from Chainlink VRF + withdrawing Lottery USDC from Compound\\n        CALCULATING_WINNER_GAINS,\\n        OPEN_TO_WITHDRAW\\n    }\\n\\n    /* State Variables */\\n    // Lottery Variables\\n    uint256 private immutable i_lotteryFee; // ETH 18 decimals\\n    uint256 private immutable i_lotteryTicketPrice; // USDC 6 decimals\\n    uint256 private immutable i_interval; // Lottery & ChainLink Keepers\\n    uint256 private immutable i_intervalWithdraw; // to automate OPEN_TO_WITHDRAW -> OPEN_TO_PLAY switch\\n    uint256 immutable i_MAX_INT = 2**256 - 1;\\n    uint256 private s_endPlayTime;\\n    uint256 private s_endWithDrawTime;\\n    uint256 private s_lastTimeStamp;\\n    uint256 private s_newPrize;\\n    address[] private s_winners;\\n    uint256 private s_totalNumTickets; // total number of active tickets == total number of LTK owned by all Players\\n    mapping(address => uint256) private playerToNumTickets; // number of player's active tickets\\n    address private immutable i_owner;\\n    address private s_newWinner;\\n    address[] private s_players;\\n    LotteryState private s_lotteryState;\\n    bool private s_isFirstPlayer = true; // reset at each Lottery round\\n\\n    // LotteryToken\\n    LotteryToken public lotteryToken;\\n\\n    // ChainLink Keepers & VRF config\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator; // VRF\\n    bytes32 private immutable i_gasLane; // VRF\\n    uint64 private immutable i_subscriptionId; // VRF\\n    uint32 private immutable i_callbackGasLimit; // VRF\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3; // VRF\\n    uint32 private constant NUMWORDS = 1; // VRF\\n\\n    // USDC\\n    ERC20 public usdc;\\n\\n    // CompoundV3\\n    Comet public comet;\\n\\n    /* Events */\\n    event LotteryEntered(address indexed player);\\n    event SupplyCompoundDone(uint256 indexed amount);\\n    event CompoundWithdrawRequestDone();\\n    event SwitchToCalculatingWinnerAddress(\\n        uint256 indexed timeToGetWinnerAddress\\n    );\\n    event RandomWinnerRequested(uint256 indexed requestId);\\n    event WinnerAddressPicked(address newWinner);\\n    event SwitchToCalculatingWinnerGains(uint256 indexed timeToGetWinnerGains);\\n    event WinnerPicked(\\n        address indexed newWinner,\\n        uint256 indexed newPrize,\\n        uint256 indexed winDate\\n    );\\n    event SwitchToOpenToWithDraw(uint256 indexed timeToWithDraw);\\n    event UserWithdraw(address indexed player, uint256 indexed amount);\\n    event SwitchToOpenToPlay(uint256 indexed timeToPlay);\\n\\n    /* Modifiers */\\n    modifier onlyOwner() {\\n        if (i_owner != msg.sender) {\\n            revert Lottery__UnAuthorized();\\n        }\\n        _;\\n    }\\n    modifier onlyOpenToPlay() {\\n        if (s_lotteryState != LotteryState.OPEN_TO_PLAY) {\\n            revert Lottery__NotOPEN_TO_PLAY();\\n        }\\n        _;\\n    }\\n\\n    /* Functions */\\n    constructor(\\n        uint256 _lotteryFee, // ETH\\n        uint256 _lotteryTicketPrice, // USDC\\n        uint256 _interval, // for Chainlink Keepers UpKeep #01\\n        uint256 _intervalWithdraw, // for Chainlink Keepers UpKeep #02\\n        address _vrfCoordinator,\\n        bytes32 _gasLane,\\n        uint64 _subscriptionId,\\n        uint32 _callbackGasLimit,\\n        uint256 _initLTKAmount,\\n        address _USDCAddress,\\n        address _cometcUSDCv3Address\\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\\n        /* Lottery */\\n        i_owner = payable(msg.sender);\\n        i_lotteryFee = _lotteryFee;\\n        i_lotteryTicketPrice = _lotteryTicketPrice;\\n        s_lotteryState = LotteryState.OPEN_TO_PLAY;\\n        i_interval = _interval;\\n        i_intervalWithdraw = _intervalWithdraw;\\n        s_lastTimeStamp = block.timestamp;\\n        /* ChainLink */\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinator);\\n        i_gasLane = _gasLane;\\n        i_subscriptionId = _subscriptionId;\\n        i_callbackGasLimit = _callbackGasLimit;\\n        /* LotteryToken */\\n        lotteryToken = new LotteryToken(_initLTKAmount);\\n        /* USDC */\\n        usdc = ERC20(_USDCAddress);\\n        /* CompoundV3 */\\n        comet = Comet(_cometcUSDCv3Address);\\n    }\\n\\n    /**\\n     * @notice function called by Player\\n     * note: this call contains 3 calls from front-end:\\n     * 1. Player calls USDC contract to transfer i_lotteryTicketPrice USDC => Lottery\\n     * 2. Player calls LTK contract to increase LTK allowance for Lottery. required for later Player call this.withdrawFromLottery()\\n     * 3. Player calls Lottery to send i_lotteryFee ETH value => Lottery\\n     * transfer 1 LTK Token to Player\\n     * add Player to the players array\\n     * add 1 ticket to Player playerToNumTickets mapping\\n     * 3. internal call by Lottery: this.approveAndSupplyCompound()\\n     */\\n    function enterLottery() public payable onlyOpenToPlay {\\n        if (msg.value != i_lotteryFee) {\\n            revert Lottery__NeedToSendCorrectAmount();\\n        }\\n        // update Player's tickets & LTK\\n        playerToNumTickets[msg.sender] += 1;\\n        s_totalNumTickets += 1;\\n        s_players.push(msg.sender);\\n        lotteryToken.transfer(msg.sender, 10**18); // 1 LTK (18 decimals)\\n        // call call USDC to approve Compound & call Compound to supply\\n        approveAndSupplyCompound();\\n        emit LotteryEntered(msg.sender);\\n    }\\n\\n    /**\\n     * @notice function called by Lottery after Player called this.enterLottery()\\n     * 1. Lottery calls USDC contract to approve (increase allowance) Compound for all current Lottery USDC balance\\n     * 2. Lottery supply Compound\\n     * 2.1 if Player is 1st Player of this Lottery round\\n     *  => all current Lottery USDC balance => supply Compound\\n     *  => set end of Playing time (s_endPlayTime) for this round, will be checked by Chainlink Keepers on this.checkUpkeep() path 02\\n     * 2.2 else => 1 Ticket Price USDC => supply Compound\\n     */\\n    function approveAndSupplyCompound() internal {\\n        // Lottery approve (increase allowance of) Compound\\n        uint256 lotteryUSDCBalance = getLotteryUSDCBalance();\\n        bool success = usdc.increaseAllowance(\\n            address(comet),\\n            lotteryUSDCBalance\\n        );\\n        if (!success) {\\n            revert Lottery__CompoundAllowanceFailed();\\n        }\\n        // Lottery supply Compound\\n        uint256 amountToSupply;\\n        if (s_isFirstPlayer) {\\n            // if Player was First Player (of this round) to call this.enterLottery()\\n            // => add to supply: (current First) Player TicketPrice + All previous Lottery runs deposits from active Players (still holding USDC in Lottery & LTK)\\n            amountToSupply = lotteryUSDCBalance;\\n            s_isFirstPlayer = false;\\n            // set s_endPlayTime for this.checkUpkeep() path 02\\n            s_endPlayTime = block.timestamp + i_interval;\\n        } else {\\n            // add to supply: 1 TicketPrice\\n            amountToSupply = i_lotteryTicketPrice;\\n        }\\n        comet.supply(address(usdc), amountToSupply);\\n        emit SupplyCompoundDone(amountToSupply);\\n    }\\n\\n    /**\\n     * @notice function can be called by:\\n     * 1. this.performUpkeep() path 02 => when a new Lottery round starts, all Lottery USDC balance is used to supply Compound\\n     * 2. admin call on this.adminApproveAndSupplyCompound(), to allow admin to fund Lottery/Compound (without being a Player)\\n     * => both \\\"1.\\\" and \\\"2.\\\" will approve & supply Compound with ALL current Lottery USDC balance\\n     */\\n    function approveAndSupplyCompoundForALLUsdc() internal {\\n        // approve Compound\\n        uint256 lotteryUSDCBalance = getLotteryUSDCBalance();\\n        bool success = usdc.increaseAllowance(\\n            address(comet),\\n            lotteryUSDCBalance\\n        );\\n        if (!success) {\\n            revert Lottery__CompoundAllowanceFailed();\\n        }\\n        // supply Compound\\n        comet.supply(address(usdc), lotteryUSDCBalance);\\n        emit SupplyCompoundDone(lotteryUSDCBalance);\\n    }\\n\\n    /**\\n     * @notice function called by this.performUpkeep() path 01, when switching Lottery state from OPEN_TO_PLAY => CALCULATING_WINNER_ADDRESS (requesting a random number from Chainlink VRF)\\n     * transfer all available USDC on Compound => Lottery\\n     * reset s_isFirstPlayer for next Lottery round\\n     * note: when this.withdrawfromCompound() is called, Lottery is in CALCULATING_WINNER_ADDRESS state\\n     */\\n    function withdrawfromCompound() internal {\\n        uint128 availableUSDC = getLotteryUSDCBalanceOnCompound();\\n        comet.withdraw(address(usdc), availableUSDC);\\n        s_isFirstPlayer = true;\\n        emit CompoundWithdrawRequestDone();\\n    }\\n\\n    /**\\n     * @notice function called by Player to withdraw its USDC from Lottery\\n     * 1. Lottery call LotteryToken => transfer ALL Player's LTK to Lottery\\n     * 2. Lottery call USDC => Transfer Player's due USDC from Lottery to Player\\n     * 3. update totalNumTickets\\n     * 4. reset Player mapping toNumTickets\\n     * note: when this.withdrawfromCompound() is called, Lottery is in OPEN_TO_WITHDRAW state\\n     */\\n    function withdrawFromLottery() public {\\n        if (s_lotteryState != LotteryState.OPEN_TO_WITHDRAW) {\\n            revert Lottery__NotOPEN_TO_WITHDRAW();\\n        }\\n        uint256 playerNumTickets = playerToNumTickets[msg.sender];\\n        // check if Player has tickets\\n        if (playerNumTickets == 0) {\\n            revert Lottery__PlayerHas0Ticket();\\n        }\\n        // transfer ALL Player's LTK => Lottery. Player gave allowance to Lottery for its LTK from front-end when entered Lottery\\n        uint256 ltkAmount = playerNumTickets * 10**18;\\n        bool success1 = lotteryToken.transferFrom(\\n            msg.sender,\\n            address(this),\\n            ltkAmount\\n        );\\n\\n        if (!success1) {\\n            revert Lottery__PlayerLTKTransferToLotteryFailed(\\n                address(this),\\n                ltkAmount\\n            );\\n        }\\n        // set Player due USDC\\n        uint256 amountDueToPlayer = playerNumTickets * i_lotteryTicketPrice; // total Player's deposit in USDC\\n        // transfer USDC due amount to Player\\n        bool success2 = usdc.transfer(msg.sender, amountDueToPlayer);\\n        if (!success2) {\\n            revert Lottery__PlayerWithdrawLotteryFailed();\\n        }\\n        // update tickets\\n        s_totalNumTickets -= playerToNumTickets[msg.sender];\\n        playerToNumTickets[msg.sender] = 0;\\n        emit UserWithdraw(msg.sender, amountDueToPlayer);\\n    }\\n\\n    /**\\n     * @dev function called by the ChainLink Keeper (\\\"Automation\\\") nodes\\n     * ChainLink Keeper look for \\\"upkeepNeeded\\\" to return true\\n     * 3 possible paths\\n     * -I. path 01\\n     * -- To return true the following is needed\\n     * ---1. Lottery state == OPEN_TO_PLAY\\n     * ---2. Lottery Time interval to Play has passed\\n     * ---3. Lottery has >= 1player, and Lottery is funded\\n     * ---4. ChainLink subscription has enough LINK\\n     * -II. path 02\\n     * ---1. Lottery state == CALCULATING_WINNER_GAINS\\n     * ---2.\\n     * ---3.\\n     * -II. path 03\\n     * -- To return true the following is needed\\n     * ---1. Lottery state == OPEN_TO_WITHDRAW\\n     * ---2. Lottery Time interval to WithDraw has Passed\\n     */\\n    function checkUpkeep(bytes memory checkData)\\n        public\\n        view\\n        override\\n        returns (bool upkeepNeeded, bytes memory performData)\\n    {\\n        // path 01\\n        if (keccak256(checkData) == keccak256(hex\\\"01\\\")) {\\n            bool isOPEN_TO_PLAY = (s_lotteryState == LotteryState.OPEN_TO_PLAY);\\n            bool timePassed = block.timestamp > s_endPlayTime;\\n            bool hasPlayer = (s_players.length > 0);\\n            bool isFunded = (address(this).balance > 0);\\n            upkeepNeeded = (isOPEN_TO_PLAY &&\\n                timePassed &&\\n                hasPlayer &&\\n                isFunded);\\n            performData = checkData;\\n        }\\n        // path 02\\n        // check if is time to calculate gains & if widthdraw from Coumpound has been mined\\n        if (keccak256(checkData) == keccak256(hex\\\"02\\\")) {\\n            bool isCALCULATING_WINNER_GAINS = (s_lotteryState ==\\n                LotteryState.CALCULATING_WINNER_GAINS);\\n            bool lotteryUSDCBalanceIsNOTNull = (getLotteryUSDCBalance() > 0);\\n            bool lotteryUSDCBalanceOnCompoundIsNull = (getLotteryUSDCBalanceOnCompound() ==\\n                    0);\\n            upkeepNeeded = (isCALCULATING_WINNER_GAINS &&\\n                lotteryUSDCBalanceIsNOTNull &&\\n                lotteryUSDCBalanceOnCompoundIsNull);\\n            performData = checkData;\\n        }\\n\\n        // path 03\\n        if (keccak256(checkData) == keccak256(hex\\\"03\\\")) {\\n            bool isOPEN_TO_WITHDRAW = (s_lotteryState ==\\n                LotteryState.OPEN_TO_WITHDRAW);\\n            bool timeToWithDrawPassed = (block.timestamp >= s_endWithDrawTime);\\n            upkeepNeeded = (isOPEN_TO_WITHDRAW && timeToWithDrawPassed);\\n            performData = checkData;\\n        }\\n    }\\n\\n    /**\\n     * @dev function called by the ChainLink Keeper (\\\"Automation\\\") nodes when checkUpkeep() returned true.\\n     * 3 possible paths\\n     * If upkeepNeeded is true:\\n     * -I. from path 01:\\n     * --I.1. Lottery calls Coumpound to transfer all available USDC => Lottery\\n     * --I.2. update s_endPlayTime to prevent checkUpKeep path 01 to return true before next run\\n     * --I.3. a request for randomness is made to ChainLink VRF\\n     * --I.4. LotteryState switch => CALCULATING_WINNER_ADDRESS\\n     *\\n     * -II. from path 02:\\n     * --II.1\\n     * --II.2\\n     *\\n     * -III. from path 03:\\n     * --III.1 LotteryState switch => OPEN_TO_PLAY\\n     * --III.2 Supply Coumpound with ALL Lottery USDC balance to start generating interests\\n     */\\n    function performUpkeep(bytes memory performData) external override {\\n        // upkeep revalidation whatever the path\\n        (bool upkeepNeeded, ) = checkUpkeep(performData);\\n        if (!upkeepNeeded) {\\n            revert Lottery__UpKeepNotNeeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(s_lotteryState)\\n            );\\n        }\\n        // path 01\\n        // GET Winner ADDRESS\\n        if (keccak256(performData) == keccak256(hex\\\"01\\\")) {\\n            // call Coumpound to transfer all available USDC => Lottery\\n            withdrawfromCompound();\\n            // update s_endPlayTime\\n            s_endPlayTime = i_MAX_INT;\\n            // switch LotteryState OPEN_TO_PLAY => CALCULATING_WINNER_ADDRESS\\n            s_lotteryState = LotteryState.CALCULATING_WINNER_ADDRESS;\\n            // request the random number from ChainLink VRF\\n            // to fulffill this request, the ChainLink nodes will call this.fulfillRandomWords()\\n            uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n                i_gasLane,\\n                i_subscriptionId,\\n                REQUEST_CONFIRMATIONS,\\n                i_callbackGasLimit,\\n                NUMWORDS\\n            );\\n            emit RandomWinnerRequested(requestId);\\n            emit SwitchToCalculatingWinnerAddress(block.timestamp);\\n        }\\n\\n        // path 02\\n        // Get Winner GAINS\\n        if (keccak256(performData) == keccak256(hex\\\"02\\\")) {\\n            // set Winner GAINS\\n            uint256 lotteryBaseUSDCValue = s_totalNumTickets *\\n                i_lotteryTicketPrice; // total current USDC deposit withOut interests\\n            uint256 lotteryCurrentUSDCBalance = getLotteryUSDCBalance(); // with interests\\n            // transfer GAINS to Winner if GAINS > 0\\n            if (lotteryCurrentUSDCBalance > lotteryBaseUSDCValue) {\\n                s_newPrize = lotteryCurrentUSDCBalance - lotteryBaseUSDCValue;\\n                bool success = usdc.transfer(s_newWinner, s_newPrize);\\n                if (!success) {\\n                    revert Lottery__TransferGainsToWinnerFailed();\\n                }\\n            } else {\\n                s_newPrize = 0;\\n            }\\n            // reset Players array\\n            s_players = new address[](0);\\n            // reset newWinner address\\n            address currentWinner = s_newWinner;\\n            s_newWinner = address(0);\\n            // switch LotteryState CALCULATING_WINNER_GAINS => OPEN_TO_WITHDRAW\\n            s_lotteryState = LotteryState.OPEN_TO_WITHDRAW;\\n            // set next endWithDrawTime\\n            s_endWithDrawTime = block.timestamp + i_intervalWithdraw;\\n            emit WinnerPicked(currentWinner, s_newPrize, block.timestamp);\\n            emit SwitchToOpenToWithDraw(block.timestamp);\\n        }\\n\\n        // path 03\\n        // Set new Lottery round\\n        if (keccak256(performData) == keccak256(hex\\\"03\\\")) {\\n            // switch LotteryState OPEN_TO_WITHDRAW => OPEN_TO_PLAY\\n            s_lotteryState = LotteryState.OPEN_TO_PLAY;\\n            // supply Coumpound with ALL Lottery USDC balance\\n            approveAndSupplyCompoundForALLUsdc();\\n            emit SwitchToOpenToPlay(block.timestamp);\\n        }\\n    }\\n\\n    /**\\n     * @dev function called by the ChainLink nodes\\n     * After the request for randomness is made to Chainlink VRF, a Chainlink Node call its own fulfillRandomWords to run off-chain calculation => randomWords.\\n     * Then, a Chainlink Node call our fulfillRandomWords (on-chain) and pass to it the requestId and the randomWords.\\n     * 1. set Winner\\n     * 2. set Winner GAINS\\n     * 3. transfer USDC GAINS to Winner\\n     * 4. reset Players array\\n     * 5. switch LotteryState CALCULATING_WINNER_ADDRESS => CALCULATING_WINNER_GAINS\\n     * 6. set next end of WithDraw Time for this round\\n     * note: all Players (including Winner) keep their USDC (all without gains) in Lottery for next run. Also, all Players (including Winner) keep their Lottery Tokens until they withdraw all their USDC.\\n     */\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory randomWords\\n    ) internal override {\\n        // set Winner\\n        uint256 indexOfWinner = randomWords[0] % s_players.length; // to get a \\\"random word\\\" belonging to [0, players.length-1]. note: randomWords[0] for we expect only 1 \\\"random word\\\" (NUMWORDS = 1).\\n        address newWinner = s_players[indexOfWinner];\\n        s_newWinner = newWinner;\\n        s_winners.push(newWinner);\\n        // switch LotteryState CALCULATING_WINNER_ADDRESS => CALCULATING_WINNER_GAINS\\n        s_lotteryState = LotteryState.CALCULATING_WINNER_GAINS;\\n        emit WinnerAddressPicked(s_newWinner);\\n        emit SwitchToCalculatingWinnerGains(block.timestamp);\\n    }\\n\\n    /* View/Pure functions */\\n    /**\\n     * @notice Getter for front end\\n     * returns the entrance fee\\n     */\\n    function getLotteryFee() external view returns (uint256) {\\n        return i_lotteryFee;\\n    }\\n\\n    /**\\n     * @notice Getter for front end\\n     * returns the lottery Ticket Price\\n     */\\n    function getLotteryTicketPrice() external view returns (uint256) {\\n        return i_lotteryTicketPrice;\\n    }\\n\\n    /**\\n     * @notice Getter for front end\\n     */\\n    function getLotteryState() external view returns (uint256) {\\n        return uint256(s_lotteryState);\\n    }\\n\\n    /**\\n     * @notice Getter for front end\\n     */\\n    function getIsFirstPlayer() external view returns (bool) {\\n        return s_isFirstPlayer;\\n    }\\n\\n    /**\\n     * @notice Getter for front end\\n     * returns the Lottery round duration\\n     */\\n    function getInterval() external view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    /**\\n     * @notice Getter for front end\\n     * returns the current Lottery round endPlayTime\\n     */\\n    function getEndPlayTime() external view returns (uint256) {\\n        return s_endPlayTime;\\n    }\\n\\n    /**\\n     * @notice Getter for front end\\n     * returns the current Lottery round endWithDrawTime\\n     */\\n    function getEndWithDrawTime() external view returns (uint256) {\\n        return s_endWithDrawTime;\\n    }\\n\\n    /**\\n     * @notice Getter\\n     * returns the total number of active tickets\\n     */\\n    function getTotalNumTickets() external view returns (uint256) {\\n        return s_totalNumTickets;\\n    }\\n\\n    /**\\n     * @notice Getter for front end\\n     * returns the players array\\n     */\\n    function getPlayers() external view returns (address[] memory) {\\n        return s_players;\\n    }\\n\\n    /**\\n     * @notice Getter\\n     * returns the Player's number of tickets\\n     */\\n    function getPlayerNumberOfTickets(address _player)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return playerToNumTickets[_player];\\n    }\\n\\n    /**\\n     * @notice Getter for front end\\n     * returns the winners array\\n     */\\n    function getWinners() external view returns (address[] memory) {\\n        return s_winners;\\n    }\\n\\n    /**\\n     * @notice Getter for front end\\n     */\\n    function getNewWinnerPrize() external view returns (uint256) {\\n        return s_newPrize;\\n    }\\n\\n    /**\\n     * @notice Getter for front end\\n     */\\n    function getLatestTimeStamp() external view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    /**\\n     * @notice Getter\\n     * returns the Lottery USDC current balance (available on Lottery)\\n     */\\n    function getLotteryUSDCBalance() public view returns (uint256) {\\n        uint256 lotteryUSDCBalance = uint256(usdc.balanceOf(address(this)));\\n        return lotteryUSDCBalance;\\n    }\\n\\n    /**\\n     * @notice Getter\\n     * returns the Lottery USDC amount available on Compound\\n     */\\n    function getLotteryUSDCBalanceOnCompound()\\n        public\\n        view\\n        returns (uint128 balance)\\n    {\\n        balance = uint128(comet.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @notice Getter for front end\\n     */\\n    function getRequestConfirmations() external pure returns (uint256) {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    /**\\n     * @notice Getter for front end\\n     */\\n    function getNumWords() external pure returns (uint256) {\\n        return NUMWORDS;\\n    }\\n\\n    /**\\n     * @notice Getter\\n     * returns the admin address\\n     */\\n    function getAdmin() external view returns (address) {\\n        return i_owner;\\n    }\\n\\n    /**\\n     * @notice function called by Admin, require Lottery state is OpenToPlay\\n     * 1. called from front-end, first: Admin send USDC to Lottery\\n     * 2. approve Compound for all current Lottery USDC balance\\n     * 3. supply Compound with all current Lottery USDC balance\\n     */\\n    function adminApproveAndSupplyCompound() external onlyOwner onlyOpenToPlay {\\n        approveAndSupplyCompoundForALLUsdc();\\n    }\\n\\n    /**\\n     * @notice function for Admin\\n     * transfers Lottery ETH to Admin\\n     */\\n    function adminWithdrawETH() external onlyOwner {\\n        (bool success, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        if (!success) {\\n            revert Lottery__AdminWithdrawETHFailed();\\n        }\\n    }\\n\\n    /* Functions fallbacks */\\n    receive() external payable {\\n        enterLottery();\\n    }\\n\\n    fallback() external payable {\\n        enterLottery();\\n    }\\n}\\n\",\"keccak256\":\"0xe27a9f2e99a97cd96290a7244b20cb72761596bf0cc792ebda8748610e298586\",\"license\":\"MIT\"},\"contracts/LotteryToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract LotteryToken is ERC20, ERC20Burnable, Ownable {\\n    // msg.sender is Lottery contract\\n    constructor(uint256 _initSupply) ERC20(\\\"LotteryToken\\\", \\\"LTK\\\") {\\n        _mint(msg.sender, _initSupply);\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyOwner {\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x09c43d404e0048a836da31168fa44c7ecd427184c2bda05aacefd7f1a78525c2\",\"license\":\"MIT\"},\"contracts/interfaces/IComet.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary CometStructs {\\n    struct AssetInfo {\\n        uint8 offset;\\n        address asset;\\n        address priceFeed;\\n        uint64 scale;\\n        uint64 borrowCollateralFactor;\\n        uint64 liquidateCollateralFactor;\\n        uint64 liquidationFactor;\\n        uint128 supplyCap;\\n    }\\n\\n    struct UserBasic {\\n        int104 principal;\\n        uint64 baseTrackingIndex;\\n        uint64 baseTrackingAccrued;\\n        uint16 assetsIn;\\n        uint8 _reserved;\\n    }\\n\\n    struct TotalsBasic {\\n        uint64 baseSupplyIndex;\\n        uint64 baseBorrowIndex;\\n        uint64 trackingSupplyIndex;\\n        uint64 trackingBorrowIndex;\\n        uint104 totalSupplyBase;\\n        uint104 totalBorrowBase;\\n        uint40 lastAccrualTime;\\n        uint8 pauseFlags;\\n    }\\n\\n    struct UserCollateral {\\n        uint128 balance;\\n        uint128 _reserved;\\n    }\\n\\n    struct RewardOwed {\\n        address token;\\n        uint owed;\\n    }\\n\\n    struct TotalsCollateral {\\n        uint128 totalSupplyAsset;\\n        uint128 _reserved;\\n    }\\n}\\n\\ninterface Comet {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function collateralBalanceOf(address account, address asset)\\n        external\\n        view\\n        returns (uint128);\\n\\n    function baseScale() external view returns (uint);\\n\\n    function supply(address asset, uint amount) external;\\n\\n    function withdraw(address asset, uint amount) external;\\n\\n    function getSupplyRate(uint utilization) external view returns (uint);\\n\\n    function getBorrowRate(uint utilization) external view returns (uint);\\n\\n    function getAssetInfoByAddress(address asset)\\n        external\\n        view\\n        returns (CometStructs.AssetInfo memory);\\n\\n    function getAssetInfo(uint8 i)\\n        external\\n        view\\n        returns (CometStructs.AssetInfo memory);\\n\\n    function getPrice(address priceFeed) external view returns (uint128);\\n\\n    function userBasic(address)\\n        external\\n        view\\n        returns (CometStructs.UserBasic memory);\\n\\n    function totalsBasic()\\n        external\\n        view\\n        returns (CometStructs.TotalsBasic memory);\\n\\n    function userCollateral(address, address)\\n        external\\n        view\\n        returns (CometStructs.UserCollateral memory);\\n\\n    function baseTokenPriceFeed() external view returns (address);\\n\\n    function numAssets() external view returns (uint8);\\n\\n    function getUtilization() external view returns (uint);\\n\\n    function baseTrackingSupplySpeed() external view returns (uint);\\n\\n    function baseTrackingBorrowSpeed() external view returns (uint);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function totalBorrow() external view returns (uint256);\\n\\n    function baseIndexScale() external pure returns (uint64);\\n\\n    function totalsCollateral(address asset)\\n        external\\n        view\\n        returns (CometStructs.TotalsCollateral memory);\\n\\n    function baseMinForRewards() external view returns (uint256);\\n\\n    function baseToken() external view returns (address);\\n}\\n\\ninterface CometRewards {\\n    function getRewardOwed(address comet, address account)\\n        external\\n        returns (CometStructs.RewardOwed memory);\\n\\n    function claim(\\n        address comet,\\n        address src,\\n        bool shouldAccrue\\n    ) external;\\n}\\n\",\"keccak256\":\"0x97f724dddbf019352dd38951449fb036bee5959460c7f0dfb03795d08fe32a5e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101bb5760003560e01c80637ef82d4c116100ec578063cf72f7181161008a578063df15c37e11610064578063df15c37e146105b4578063ed84fc91146105df578063f78fff4c146105f6578063f7f5c3dd14610621576101ca565b8063cf72f71814610547578063d53c1f0a14610572578063def6c81d14610589576101ca565b806394539467116100c657806394539467146104bc578063ba3e9c12146104e7578063be3d802014610512578063c1af57851461053d576101ca565b80637ef82d4c1461043b5780638b5b9ccc1461046657806391ad27b414610491576101ca565b806347067a581161015957806364d92b241161013357806364d92b241461036a5780636b68c03c146103a75780636e04ff0d146103d25780636e9960c314610410576101ca565b806347067a58146102e957806353a2c19a146103145780635f1b0fd81461033f576101ca565b8063320229eb11610195578063320229eb146102535780633e413bee1461027e57806344b815ef146102a95780634585e33b146102c0576101ca565b80630b08c51e146101d45780630c67686f146101ff5780631fe543e31461022a576101ca565b366101ca576101c861064c565b005b6101d261064c565b005b3480156101e057600080fd5b506101e96108dc565b6040516101f69190612403565b60405180910390f35b34801561020b57600080fd5b506102146108e6565b6040516102219190612439565b60405180910390f35b34801561023657600080fd5b50610251600480360381019061024c91906125ed565b6108fd565b005b34801561025f57600080fd5b506102686109bd565b6040516102759190612403565b60405180910390f35b34801561028a57600080fd5b506102936109c7565b6040516102a091906126c8565b60405180910390f35b3480156102b557600080fd5b506102be6109ed565b005b3480156102cc57600080fd5b506102e760048036038101906102e29190612798565b610ae9565b005b3480156102f557600080fd5b506102fe611116565b60405161030b9190612403565b60405180910390f35b34801561032057600080fd5b5061032961111f565b6040516103369190612403565b60405180910390f35b34801561034b57600080fd5b5061035461112e565b6040516103619190612403565b60405180910390f35b34801561037657600080fd5b50610391600480360381019061038c919061281f565b61113b565b60405161039e9190612403565b60405180910390f35b3480156103b357600080fd5b506103bc611184565b6040516103c99190612403565b60405180910390f35b3480156103de57600080fd5b506103f960048036038101906103f49190612798565b6111ad565b6040516104079291906128cb565b60405180910390f35b34801561041c57600080fd5b50610425611396565b604051610432919061290a565b60405180910390f35b34801561044757600080fd5b506104506113be565b60405161045d9190612403565b60405180910390f35b34801561047257600080fd5b5061047b6113c8565b60405161048891906129e3565b60405180910390f35b34801561049d57600080fd5b506104a6611456565b6040516104b39190612403565b60405180910390f35b3480156104c857600080fd5b506104d161147e565b6040516104de9190612a26565b60405180910390f35b3480156104f357600080fd5b506104fc6114a4565b6040516105099190612a62565b60405180910390f35b34801561051e57600080fd5b506105276114ca565b6040516105349190612403565b60405180910390f35b61054561064c565b005b34801561055357600080fd5b5061055c6114f2565b6040516105699190612403565b60405180910390f35b34801561057e57600080fd5b5061058761151a565b005b34801561059557600080fd5b5061059e6118f9565b6040516105ab9190612403565b60405180910390f35b3480156105c057600080fd5b506105c96119a1565b6040516105d691906129e3565b60405180910390f35b3480156105eb57600080fd5b506105f4611a2f565b005b34801561060257600080fd5b5061060b611b5a565b6040516106189190612aa8565b60405180910390f35b34801561062d57600080fd5b50610636611bfd565b6040516106439190612403565b60405180910390f35b600060038111156106605761065f612ac3565b5b600960009054906101000a900460ff16600381111561068257610681612ac3565b5b146106b9576040517f5bc17e3b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000003414610712576040517f9654d67a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107629190612b21565b9250508190555060016005600082825461077c9190612b21565b925050819055506008339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600960029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33670de0b6b3a76400006040518363ffffffff1660e01b815260040161084b929190612b90565b6020604051808303816000875af115801561086a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088e9190612be5565b50610897611c07565b3373ffffffffffffffffffffffffffffffffffffffff167f4c72b57c1ca715219cf2c7be9edc8a3ea19dfb9a76fb7a05e2a8062a027ee97060405160405180910390a2565b6000600154905090565b6000600960019054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109af57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016109a6929190612c12565b60405180910390fd5b6109b98282611e83565b5050565b6000600254905090565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614610a72576040517fc62447dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006003811115610a8657610a85612ac3565b5b600960009054906101000a900460ff166003811115610aa857610aa7612ac3565b5b14610adf576040517f5bc17e3b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610ae7612051565b565b6000610af4826111ad565b50905080610b635747600880549050600960009054906101000a900460ff166003811115610b2557610b24612ac3565b5b6040517fa9e3cfef000000000000000000000000000000000000000000000000000000008152600401610b5a93929190612c3b565b60405180910390fd5b7f5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd2828051906020012003610d5157610b9961223c565b7f00000000000000000000000000000000000000000000000000000000000000006000819055506001600960006101000a81548160ff02191690836003811115610be657610be5612ac3565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610cb0959493929190612cea565b6020604051808303816000875af1158015610ccf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf39190612d52565b9050807f302e4abbbf85f09e8c1a81aaabf5f64a2dca99aa646ca90b6b6bf470e4148a7e60405160405180910390a2427f23a03086cfdfde34c6b0dc0b14076796698c6dd9685c15eadf6dd30add6b835d60405160405180910390a2505b7ff2ee15ea639b73fa3db9b34a245bdfa015c260c598b211bf05a1ecc4b3e3b4f28280519060200120036110835760007f0000000000000000000000000000000000000000000000000000000000000000600554610daf9190612d7f565b90506000610dbb6118f9565b905081811115610edc578181610dd19190612dc1565b6003819055506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166003546040518363ffffffff1660e01b8152600401610e5a929190612df5565b6020604051808303816000875af1158015610e79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9d9190612be5565b905080610ed6576040517f12a6c12600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50610ee5565b60006003819055505b600067ffffffffffffffff811115610f0057610eff6124aa565b5b604051908082528060200260200182016040528015610f2e5781602001602082028036833780820191505090505b5060089080519060200190610f44929190612343565b506000600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506003600960006101000a81548160ff02191690836003811115610fd457610fd3612ac3565b5b02179055507f0000000000000000000000000000000000000000000000000000000000000000426110059190612b21565b600181905550426003548273ffffffffffffffffffffffffffffffffffffffff167f7e57d825a2478cc8123a008d7d1e20c0f6e8cbca89a7bc100c9b05ecb3698deb60405160405180910390a4427f2bb9761672d46a3362a19185b7536568640baf057b358b6ebd118c1006c90ea660405160405180910390a25050505b7f69c322e3248a5dfc29d73c5b0553b0185a35cd5bb6386747517ef7e53b15e287828051906020012003611112576000600960006101000a81548160ff021916908360038111156110d7576110d6612ac3565b5b02179055506110e4612051565b427f833a8c78cd852c16da367919643d7a5496863c4cd4ea7ceff7a173b34fe9695260405160405180910390a25b5050565b60008054905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600960009054906101000a900460ff1660038111156111a8576111a7612ac3565b5b905090565b600060607f5fe7f977e71dba2ea1a68e21057beebb9be2ac30c6410aa38d4f3fbe41dcffd283805190602001200361125a5760008060038111156111f4576111f3612ac3565b5b600960009054906101000a900460ff16600381111561121657611215612ac3565b5b14905060008054421190506000806008805490501190506000804711905083801561123e5750825b80156112475750815b80156112505750805b9550869450505050505b7ff2ee15ea639b73fa3db9b34a245bdfa015c260c598b211bf05a1ecc4b3e3b4f283805190602001200361130d5760006002600381111561129e5761129d612ac3565b5b600960009054906101000a900460ff1660038111156112c0576112bf612ac3565b5b1490506000806112ce6118f9565b1190506000806112dc611b5a565b6fffffffffffffffffffffffffffffffff161490508280156112fb5750815b80156113045750805b94508593505050505b7f69c322e3248a5dfc29d73c5b0553b0185a35cd5bb6386747517ef7e53b15e2878380519060200120036113915760006003808111156113505761134f612ac3565b5b600960009054906101000a900460ff16600381111561137257611371612ac3565b5b149050600060015442101590508180156113895750805b935084925050505b915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b6060600880548060200260200160405190810160405280929190818152602001828054801561144c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311611402575b5050505050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600960029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60038081111561152d5761152c612ac3565b5b600960009054906101000a900460ff16600381111561154f5761154e612ac3565b5b14611586576040517f0496cb0e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008103611604576040517fb997093000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000670de0b6b3a76400008261161a9190612d7f565b90506000600960029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161167d93929190612e1e565b6020604051808303816000875af115801561169c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116c09190612be5565b9050806117065730826040517fb5aa8b750000000000000000000000000000000000000000000000000000000081526004016116fd929190612df5565b60405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000846117349190612d7f565b90506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611795929190612df5565b6020604051808303816000875af11580156117b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d89190612be5565b905080611811576040517fc61e404300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054600560008282546118629190612dc1565b925050819055506000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550813373ffffffffffffffffffffffffffffffffffffffff167f98824d89d47225910d3e61aa38b640d29d58b43e2dc47b4d986a588c88e0a2a860405160405180910390a35050505050565b600080600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611957919061290a565b602060405180830381865afa158015611974573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119989190612d52565b90508091505090565b60606004805480602002602001604051908101604052809291908181526020018280548015611a2557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116119db575b5050505050905090565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1614611ab4576040517fc62447dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff1647604051611ada90612e86565b60006040518083038185875af1925050503d8060008114611b17576040519150601f19603f3d011682016040523d82523d6000602084013e611b1c565b606091505b5050905080611b57576040517feaced0f800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611bb7919061290a565b602060405180830381865afa158015611bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf89190612d52565b905090565b6000600554905090565b6000611c116118f9565b90506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339509351600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401611c94929190612df5565b6020604051808303816000875af1158015611cb3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd79190612be5565b905080611d10576040517fc21994d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600960019054906101000a900460ff1615611d7c578290506000600960016101000a81548160ff0219169083151502179055507f000000000000000000000000000000000000000000000000000000000000000042611d719190612b21565b600081905550611da0565b7f000000000000000000000000000000000000000000000000000000000000000090505b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2b9fdb8600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401611e1f929190612df5565b600060405180830381600087803b158015611e3957600080fd5b505af1158015611e4d573d6000803e3d6000fd5b50505050807f49a22ceda38ca91b4ac62806b9736d04ca01ad1328269bacba067c9b3a26ab5b60405160405180910390a2505050565b600060088054905082600081518110611e9f57611e9e612e9b565b5b6020026020010151611eb19190612ef9565b9050600060088281548110611ec957611ec8612e9b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002600960006101000a81548160ff02191690836003811115611fc057611fbf612ac3565b5b02179055507f9b75caaddd29bd1950e2ac37b33a686044e058991e976bdfa81962621ab6211f600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16604051612016919061290a565b60405180910390a1427f3d6f9ab1faffa3612ae6e56dd29188d8b07bd31769c1af616d0adadf7a28d99260405160405180910390a250505050565b600061205b6118f9565b90506000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166339509351600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b81526004016120de929190612df5565b6020604051808303816000875af11580156120fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121219190612be5565b90508061215a576040517fc21994d800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f2b9fdb8600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b81526004016121d9929190612df5565b600060405180830381600087803b1580156121f357600080fd5b505af1158015612207573d6000803e3d6000fd5b50505050817f49a22ceda38ca91b4ac62806b9736d04ca01ad1328269bacba067c9b3a26ab5b60405160405180910390a25050565b6000612246611b5a565b9050600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f3fef3a3600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b81526004016122c7929190612f5b565b600060405180830381600087803b1580156122e157600080fd5b505af11580156122f5573d6000803e3d6000fd5b505050506001600960016101000a81548160ff0219169083151502179055507fbd72d74ce98924a1669bad84833a4a326af93dcf34b6e9008a73432477c9a58d60405160405180910390a150565b8280548282559060005260206000209081019282156123bc579160200282015b828111156123bb5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612363565b5b5090506123c991906123cd565b5090565b5b808211156123e65760008160009055506001016123ce565b5090565b6000819050919050565b6123fd816123ea565b82525050565b600060208201905061241860008301846123f4565b92915050565b60008115159050919050565b6124338161241e565b82525050565b600060208201905061244e600083018461242a565b92915050565b6000604051905090565b600080fd5b600080fd5b612471816123ea565b811461247c57600080fd5b50565b60008135905061248e81612468565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6124e282612499565b810181811067ffffffffffffffff82111715612501576125006124aa565b5b80604052505050565b6000612514612454565b905061252082826124d9565b919050565b600067ffffffffffffffff8211156125405761253f6124aa565b5b602082029050602081019050919050565b600080fd5b600061256961256484612525565b61250a565b9050808382526020820190506020840283018581111561258c5761258b612551565b5b835b818110156125b557806125a1888261247f565b84526020840193505060208101905061258e565b5050509392505050565b600082601f8301126125d4576125d3612494565b5b81356125e4848260208601612556565b91505092915050565b600080604083850312156126045761260361245e565b5b60006126128582860161247f565b925050602083013567ffffffffffffffff81111561263357612632612463565b5b61263f858286016125bf565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061268e61268961268484612649565b612669565b612649565b9050919050565b60006126a082612673565b9050919050565b60006126b282612695565b9050919050565b6126c2816126a7565b82525050565b60006020820190506126dd60008301846126b9565b92915050565b600080fd5b600067ffffffffffffffff821115612703576127026124aa565b5b61270c82612499565b9050602081019050919050565b82818337600083830152505050565b600061273b612736846126e8565b61250a565b905082815260208101848484011115612757576127566126e3565b5b612762848285612719565b509392505050565b600082601f83011261277f5761277e612494565b5b813561278f848260208601612728565b91505092915050565b6000602082840312156127ae576127ad61245e565b5b600082013567ffffffffffffffff8111156127cc576127cb612463565b5b6127d88482850161276a565b91505092915050565b60006127ec82612649565b9050919050565b6127fc816127e1565b811461280757600080fd5b50565b600081359050612819816127f3565b92915050565b6000602082840312156128355761283461245e565b5b60006128438482850161280a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561288657808201518184015260208101905061286b565b60008484015250505050565b600061289d8261284c565b6128a78185612857565b93506128b7818560208601612868565b6128c081612499565b840191505092915050565b60006040820190506128e0600083018561242a565b81810360208301526128f28184612892565b90509392505050565b612904816127e1565b82525050565b600060208201905061291f60008301846128fb565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61295a816127e1565b82525050565b600061296c8383612951565b60208301905092915050565b6000602082019050919050565b600061299082612925565b61299a8185612930565b93506129a583612941565b8060005b838110156129d65781516129bd8882612960565b97506129c883612978565b9250506001810190506129a9565b5085935050505092915050565b600060208201905081810360008301526129fd8184612985565b905092915050565b6000612a1082612695565b9050919050565b612a2081612a05565b82525050565b6000602082019050612a3b6000830184612a17565b92915050565b6000612a4c82612695565b9050919050565b612a5c81612a41565b82525050565b6000602082019050612a776000830184612a53565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b612aa281612a7d565b82525050565b6000602082019050612abd6000830184612a99565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612b2c826123ea565b9150612b37836123ea565b9250828201905080821115612b4f57612b4e612af2565b5b92915050565b6000819050919050565b6000612b7a612b75612b7084612b55565b612669565b6123ea565b9050919050565b612b8a81612b5f565b82525050565b6000604082019050612ba560008301856128fb565b612bb26020830184612b81565b9392505050565b612bc28161241e565b8114612bcd57600080fd5b50565b600081519050612bdf81612bb9565b92915050565b600060208284031215612bfb57612bfa61245e565b5b6000612c0984828501612bd0565b91505092915050565b6000604082019050612c2760008301856128fb565b612c3460208301846128fb565b9392505050565b6000606082019050612c5060008301866123f4565b612c5d60208301856123f4565b612c6a60408301846123f4565b949350505050565b6000819050919050565b612c8581612c72565b82525050565b600067ffffffffffffffff82169050919050565b612ca881612c8b565b82525050565b600061ffff82169050919050565b612cc581612cae565b82525050565b600063ffffffff82169050919050565b612ce481612ccb565b82525050565b600060a082019050612cff6000830188612c7c565b612d0c6020830187612c9f565b612d196040830186612cbc565b612d266060830185612cdb565b612d336080830184612cdb565b9695505050505050565b600081519050612d4c81612468565b92915050565b600060208284031215612d6857612d6761245e565b5b6000612d7684828501612d3d565b91505092915050565b6000612d8a826123ea565b9150612d95836123ea565b9250828202612da3816123ea565b91508282048414831517612dba57612db9612af2565b5b5092915050565b6000612dcc826123ea565b9150612dd7836123ea565b9250828203905081811115612def57612dee612af2565b5b92915050565b6000604082019050612e0a60008301856128fb565b612e1760208301846123f4565b9392505050565b6000606082019050612e3360008301866128fb565b612e4060208301856128fb565b612e4d60408301846123f4565b949350505050565b600081905092915050565b50565b6000612e70600083612e55565b9150612e7b82612e60565b600082019050919050565b6000612e9182612e63565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612f04826123ea565b9150612f0f836123ea565b925082612f1f57612f1e612eca565b5b828206905092915050565b6000612f45612f40612f3b84612a7d565b612669565b6123ea565b9050919050565b612f5581612f2a565b82525050565b6000604082019050612f7060008301856128fb565b612f7d6020830184612f4c565b939250505056fea2646970667358221220a948b019dc0eb0bd17e4d0bc51c28fcf94f318f73647a914dad068d5de0e4cb164736f6c63430008110033",
  "devdoc": {
    "author": "SiegfriedBz",
    "details": "This implements CompoundV3, and Chainlink VRF v2 & Chainlink Keeper (\"Automation\")",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "function called by the ChainLink Keeper (\"Automation\") nodes ChainLink Keeper look for \"upkeepNeeded\" to return true 3 possible paths -I. path 01 -- To return true the following is needed ---1. Lottery state == OPEN_TO_PLAY ---2. Lottery Time interval to Play has passed ---3. Lottery has >= 1player, and Lottery is funded ---4. ChainLink subscription has enough LINK -II. path 02 ---1. Lottery state == CALCULATING_WINNER_GAINS ---2. ---3. -II. path 03 -- To return true the following is needed ---1. Lottery state == OPEN_TO_WITHDRAW ---2. Lottery Time interval to WithDraw has Passed"
      },
      "performUpkeep(bytes)": {
        "details": "function called by the ChainLink Keeper (\"Automation\") nodes when checkUpkeep() returned true. 3 possible paths If upkeepNeeded is true: -I. from path 01: --I.1. Lottery calls Coumpound to transfer all available USDC => Lottery --I.2. update s_endPlayTime to prevent checkUpKeep path 01 to return true before next run --I.3. a request for randomness is made to ChainLink VRF --I.4. LotteryState switch => CALCULATING_WINNER_ADDRESS -II. from path 02: --II.1 --II.2 -III. from path 03: --III.1 LotteryState switch => OPEN_TO_PLAY --III.2 Supply Coumpound with ALL Lottery USDC balance to start generating interests"
      }
    },
    "title": "A sample No-Loss Lottery contract with CompoundV3 USDC Lending",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "adminApproveAndSupplyCompound()": {
        "notice": "function called by Admin, require Lottery state is OpenToPlay 1. called from front-end, first: Admin send USDC to Lottery 2. approve Compound for all current Lottery USDC balance 3. supply Compound with all current Lottery USDC balance"
      },
      "adminWithdrawETH()": {
        "notice": "function for Admin transfers Lottery ETH to Admin"
      },
      "enterLottery()": {
        "notice": "function called by Player note: this call contains 3 calls from front-end: 1. Player calls USDC contract to transfer i_lotteryTicketPrice USDC => Lottery 2. Player calls LTK contract to increase LTK allowance for Lottery. required for later Player call this.withdrawFromLottery() 3. Player calls Lottery to send i_lotteryFee ETH value => Lottery transfer 1 LTK Token to Player add Player to the players array add 1 ticket to Player playerToNumTickets mapping 3. internal call by Lottery: this.approveAndSupplyCompound()"
      },
      "getAdmin()": {
        "notice": "Getter returns the admin address"
      },
      "getEndPlayTime()": {
        "notice": "Getter for front end returns the current Lottery round endPlayTime"
      },
      "getEndWithDrawTime()": {
        "notice": "Getter for front end returns the current Lottery round endWithDrawTime"
      },
      "getInterval()": {
        "notice": "Getter for front end returns the Lottery round duration"
      },
      "getIsFirstPlayer()": {
        "notice": "Getter for front end"
      },
      "getLatestTimeStamp()": {
        "notice": "Getter for front end"
      },
      "getLotteryFee()": {
        "notice": "Getter for front end returns the entrance fee"
      },
      "getLotteryState()": {
        "notice": "Getter for front end"
      },
      "getLotteryTicketPrice()": {
        "notice": "Getter for front end returns the lottery Ticket Price"
      },
      "getLotteryUSDCBalance()": {
        "notice": "Getter returns the Lottery USDC current balance (available on Lottery)"
      },
      "getLotteryUSDCBalanceOnCompound()": {
        "notice": "Getter returns the Lottery USDC amount available on Compound"
      },
      "getNewWinnerPrize()": {
        "notice": "Getter for front end"
      },
      "getNumWords()": {
        "notice": "Getter for front end"
      },
      "getPlayerNumberOfTickets(address)": {
        "notice": "Getter returns the Player's number of tickets"
      },
      "getPlayers()": {
        "notice": "Getter for front end returns the players array"
      },
      "getRequestConfirmations()": {
        "notice": "Getter for front end"
      },
      "getTotalNumTickets()": {
        "notice": "Getter returns the total number of active tickets"
      },
      "getWinners()": {
        "notice": "Getter for front end returns the winners array"
      },
      "withdrawFromLottery()": {
        "notice": "function called by Player to withdraw its USDC from Lottery 1. Lottery call LotteryToken => transfer ALL Player's LTK to Lottery 2. Lottery call USDC => Transfer Player's due USDC from Lottery to Player 3. update totalNumTickets 4. reset Player mapping toNumTickets note: when this.withdrawfromCompound() is called, Lottery is in OPEN_TO_WITHDRAW state"
      }
    },
    "notice": "This contract is for creating an untamperable decentralized Lottery smart contractCompoundV3 to lend USDC and generate gainsChainlink VRF will pick a random numberChainlink Keeper has 2 roles: 1. will call the function to pick a Winner, when the Lottery is in OPEN_TO_PLAY state 2. will set the time during which Players can withdraw their funds, after a Lottery runPlayer can enter Lottery by: 1. transfering USDC (lotteryTicketPrice) to start lending 2. sending ETH (lotteryFee) to pay the LotteryPlayer gets 1 Lottery Token (LTK) by entering Lottery.When a Player withdraws its USDC, he transfers all its LTK to Lottery",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2073,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_endPlayTime",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 2075,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_endWithDrawTime",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2077,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2079,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_newPrize",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 2082,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_winners",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2084,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_totalNumTickets",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2088,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "playerToNumTickets",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2092,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_newWinner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2095,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_players",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2098,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 0,
        "slot": "9",
        "type": "t_enum(LotteryState)2056"
      },
      {
        "astId": 2101,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_isFirstPlayer",
        "offset": 1,
        "slot": "9",
        "type": "t_bool"
      },
      {
        "astId": 2104,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryToken",
        "offset": 2,
        "slot": "9",
        "type": "t_contract(LotteryToken)3280"
      },
      {
        "astId": 2122,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "usdc",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(ERC20)1833"
      },
      {
        "astId": 2125,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "comet",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(Comet)3498"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(Comet)3498": {
        "encoding": "inplace",
        "label": "contract Comet",
        "numberOfBytes": "20"
      },
      "t_contract(ERC20)1833": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryToken)3280": {
        "encoding": "inplace",
        "label": "contract LotteryToken",
        "numberOfBytes": "20"
      },
      "t_enum(LotteryState)2056": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}