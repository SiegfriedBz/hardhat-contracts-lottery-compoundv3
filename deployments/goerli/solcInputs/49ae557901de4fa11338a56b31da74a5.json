{
  "language": "Solidity",
  "sources": {
    "contracts/Lottery.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\nerror Lottery__UnAuthorized();\nerror Lottery__NeedToSendCorrectAmount();\nerror Lottery__TransferGainsToWinnerFailed();\nerror Lottery__NotOPEN_TO_PLAY();\nerror Lottery__UpKeepNotNeeded(\n    uint256 _lotteryBalance,\n    uint256 _numberOfPlayers,\n    uint256 _lotteryState\n);\nerror Lottery__CompoundAllowanceFailed();\nerror Lottery__NotOPEN_TO_WITHDRAW();\nerror Lottery__PlayerHas0Ticket();\nerror Lottery__PlayerLTKTransferToLotteryFailed(\n    address _transferTo,\n    uint256 _ltkAmount\n);\nerror Lottery__PlayerWithdrawLotteryFailed();\nerror Lottery__AdminWithdrawETHFailed();\nerror Lottery__AdminWithdrawUSDCFailed();\nerror Lottery__AdminCanNotPerformMyUpkeep();\n\n// LotteryToken LTK ERC20 Mintable\nimport \"./LotteryToken.sol\";\n// Chainlink VRF v2 - Verifiable Random Function\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\n// Chainlink Keeper - Automation\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\n// USDC ERC20\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n// Compound V3\nimport \"./interfaces/IComet.sol\";\n\n/** @title A sample Lottery contract with CompoundV3 USDC Lending\n * @author SiegfriedBz\n * @notice This contract is for creating an untamperable decentralized Lottery smart contract\n * @dev This implements Chainlink VRF v2 & Chainlink Keeper (\"Automation\")\n * @notice Chainlink VRF will pick a random number\n * @notice Chainlink Keeper will call the function to pick a Winner\n * @dev This implements CompoundV3 to lend USDC\n * @notice Player can enter Lottery by:\n * 1. transfering USDC (lotteryTicketPrice) to start lending\n * 2. sending ETH (lotteryFee) to pay the Lottery\n * @notice Player gets 1 Lottery Token (LTK) by entering Lottery\n */\n\ncontract Lottery is VRFConsumerBaseV2, KeeperCompatibleInterface {\n    /* Type Declaration */\n    enum LotteryState {\n        OPEN_TO_PLAY,\n        CALCULATING, // requesting a random number from Chainlink VRF + withdrawing Lottery USDC from Compound\n        OPEN_TO_WITHDRAW\n    }\n\n    /* State Variables */\n    // Lottery Variables\n    uint256 private immutable i_lotteryFee; // ETH 18 decimals\n    uint256 private immutable i_lotteryTicketPrice; // USDC 6 decimals\n    uint256 private immutable i_initLTKAmount; // number of LTK minted during LTK deployment\n    uint256 private immutable i_interval; // Lottery & ChainLink Keepers\n    uint256 private immutable i_intervalWithdraw; // to automate OPEN_TO_WITHDRAW -> OPEN_TO_PLAY switch\n    uint256 immutable i_MAX_INT = 2**256 - 1;\n    uint256 private s_endPlayTime;\n    uint256 private s_endWithDrawTime;\n    uint256 private s_lastTimeStamp;\n    uint256 private s_newPrize;\n    address[] private s_winners;\n    uint256 private s_totalNumTickets; // total number of active tickets == total number of LTK owned by Players\n    mapping(address => uint256) private playerToNumTickets; // player's active tickets number\n    address private immutable i_owner;\n    address private s_newWinner;\n    address[] private s_players;\n    LotteryState private s_lotteryState;\n    bool private s_isFirstPlayer = true; // reset at each Lottery round\n\n    // LotteryToken\n    LotteryToken public lotteryToken;\n\n    // ChainLink Keepers & VRF config\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator; // VRF\n    bytes32 private immutable i_gasLane; // VRF\n    uint64 private immutable i_subscriptionId; // VRF\n    uint32 private immutable i_callbackGasLimit; // VRF\n    uint16 private constant REQUEST_CONFIRMATIONS = 3; // VRF\n    uint32 private constant NUMWORDS = 1; // VRF\n\n    // USDC\n    ERC20 public usdc;\n\n    // CompoundV3\n    Comet public comet;\n\n    /* Events */\n    event LotteryEntered(address indexed player);\n    event SupplyCompoundDone(uint256 indexed amount);\n    event CompoundWithdrawRequested();\n    event SwitchToCalculating(uint256 indexed timeToPlay);\n    event CompoundWithdrawDone();\n    event RandomWinnerRequested(uint256 indexed requestId);\n    event WinnerPicked(\n        address indexed s_newWinner,\n        uint256 indexed s_newPrize,\n        uint256 indexed winDate\n    );\n    event SwitchToOpenToWithDraw(uint256 indexed timeToWithDraw);\n    event UserWithdraw(address indexed player, uint256 indexed amount);\n    event SwitchToOpenToPlay(uint256 indexed timeToPlay);\n\n    /* Modifiers */\n    modifier onlyOwner() {\n        if (i_owner != msg.sender) {\n            revert Lottery__UnAuthorized();\n        }\n        _;\n    }\n    modifier onlyOpenToPlay() {\n        if (s_lotteryState != LotteryState.OPEN_TO_PLAY) {\n            revert Lottery__NotOPEN_TO_PLAY();\n        }\n        _;\n    }\n\n    /* Functions */\n    constructor(\n        uint256 _lotteryFee, // ETH\n        uint256 _lotteryTicketPrice, // USDC\n        uint256 _interval, // for UpKeep #01\n        uint256 _intervalWithdraw, // for UpKeep #02\n        address _vrfCoordinator,\n        bytes32 _gasLane,\n        uint64 _subscriptionId,\n        uint32 _callbackGasLimit,\n        uint256 _initLTKAmount,\n        address _USDCAddress,\n        address _cometcUSDCv3Address\n    ) VRFConsumerBaseV2(_vrfCoordinator) {\n        /* Lottery */\n        i_owner = payable(msg.sender);\n        i_lotteryFee = _lotteryFee;\n        i_lotteryTicketPrice = _lotteryTicketPrice;\n        s_lotteryState = LotteryState.OPEN_TO_PLAY;\n        i_interval = _interval;\n        i_intervalWithdraw = _intervalWithdraw;\n        s_lastTimeStamp = block.timestamp;\n        /* ChainLink */\n        i_vrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinator);\n        i_gasLane = _gasLane;\n        i_subscriptionId = _subscriptionId;\n        i_callbackGasLimit = _callbackGasLimit;\n        /* LotteryToken */\n        i_initLTKAmount = _initLTKAmount;\n        lotteryToken = new LotteryToken(_initLTKAmount);\n        /* USDC */\n        usdc = ERC20(_USDCAddress);\n        /* CompoundV3 */\n        comet = Comet(_cometcUSDCv3Address);\n    }\n\n    /**\n     * @notice function called by Player\n     * note: this call contains 3 calls from front-end:\n     * 1. Player calls USDC to transfer i_lotteryTicketPrice USDC => Lottery\n     * 2. Player calls USDC to give allowance to Lottery to use its LTKs: required for later Player call this.withdrawFromLottery()\n     * 3. Player calls Lottery to send i_lotteryFee ETH value => Lottery\n     * transfer 1 Lottery Token to Player\n     * add Player to the players array\n     * add 1 ticket to Player playerToNumTickets mapping\n     * 3. internal calls by Lottery:\n     * 3.1 call USDC to approve Compound\n     * 3.2 call Compound to supply USDC => Compound\n     */\n    function enterLottery() public payable onlyOpenToPlay {\n        if (msg.value != i_lotteryFee) {\n            revert Lottery__NeedToSendCorrectAmount();\n        }\n        // update Player's tickets & LTK\n        playerToNumTickets[msg.sender] += 1;\n        s_totalNumTickets += 1;\n        s_players.push(msg.sender);\n        lotteryToken.transfer(msg.sender, 10**18); // 1 LTK (18 decimals)\n        // call Compound to supply\n        approveAndSupplyCompound();\n        emit LotteryEntered(msg.sender);\n    }\n\n    /**\n     * @notice function called by Lottery after Player called enterLottery\n     * 1. approve Compound for all current Lottery USDC balance\n     * 2.1 if Player is 1st Player of this Lottery round => all current Lottery USDC balance --> supply Compound\n     * 2.2 else => 1 Ticket Price USDC --> supply Compound\n     */\n    function approveAndSupplyCompound() internal {\n        // Lottery approve Compound for all current Lottery USDC balance\n        uint256 lotteryUSDCBalance = getLotteryUSDCBalance();\n        bool success = usdc.increaseAllowance(\n            address(comet),\n            lotteryUSDCBalance\n        );\n        if (!success) {\n            revert Lottery__CompoundAllowanceFailed();\n        }\n        // Lottery supply Compound\n        uint256 amountToSupply;\n        if (s_isFirstPlayer) {\n            // if call from First Player\n            // add to supply: (current First) Player TicketPrice + All previous Lottery runs deposits from active Players (still holding USDC in Lottery & LTK)\n            amountToSupply = lotteryUSDCBalance;\n            s_isFirstPlayer = false;\n            // set s_endPlayTime for upKeep01\n            s_endPlayTime = block.timestamp + i_interval;\n        } else {\n            // add to supply: 1 TicketPrice (current Player)\n            amountToSupply = i_lotteryTicketPrice;\n        }\n        comet.supply(address(usdc), amountToSupply);\n        emit SupplyCompoundDone(amountToSupply);\n    }\n\n    /**\n     * @notice function\n     * 1. approve Compound for ALL current Lottery USDC balance\n     * 2. all current Lottery USDC balance --> supply Compound with ALL USDC /!\\\n     */\n    function approveAndSupplyCompoundForALLUsd() internal {\n        // approve Compound for ALL current Lottery USDC balance\n        uint256 lotteryUSDCBalance = getLotteryUSDCBalance();\n        bool success = usdc.increaseAllowance(\n            address(comet),\n            lotteryUSDCBalance\n        );\n        if (!success) {\n            revert Lottery__CompoundAllowanceFailed();\n        }\n        // Lottery supply Compound with ALL current Lottery USDC balance\n        comet.supply(address(usdc), lotteryUSDCBalance);\n        emit SupplyCompoundDone(lotteryUSDCBalance);\n    }\n\n    /**\n     * @notice function called by Lottery\n     * transfer all available USDC from Compound => Lottery\n     * reset s_isFirstPlayer for next Lottery round\n     * note: Lottery is currently in CALCULATING state\n     */\n    function withdrawfromCompound() internal {\n        uint128 availableUSDC = getLotteryUSDCBalanceOnCompound();\n        comet.withdraw(address(usdc), availableUSDC);\n        s_isFirstPlayer = true;\n        emit CompoundWithdrawRequested();\n        emit CompoundWithdrawDone();\n    }\n\n    /**\n     * @notice function called by Player to withdraw its USDC from Lottery\n     * 1. Player calls Lottery --> Lottery calls LotteryToken => transfer LTK From Player to Lottery\n     * reset Player mapping toNumTickets\n     * update totalNumTickets\n     * 2. Lottery call USDC => Transfer Player's USDC from Lottery to Player\n     * note: Player get MAX of (PlayerNumTokens * TicketPrice, PlayerRatio * LotteryCurrentUSDCBalance)\n     * note: Lottery is currently in OPEN_TO_WITHDRAW state\n     */\n    function withdrawFromLottery() public {\n        if (s_lotteryState != LotteryState.OPEN_TO_WITHDRAW) {\n            revert Lottery__NotOPEN_TO_WITHDRAW();\n        }\n        uint256 playerNumTickets = playerToNumTickets[msg.sender];\n        // check if Player has tickets\n        if (playerNumTickets == 0) {\n            revert Lottery__PlayerHas0Ticket();\n        }\n        // transfer LTK From Player => Lottery // Player gave allowance to Lottery for its LTK amount\n        uint256 ltkAmount = playerNumTickets * 10**18;\n        bool success1 = lotteryToken.transferFrom( /* address sender, address recipient, uint256 amount */\n            msg.sender,\n            address(this),\n            ltkAmount\n        );\n\n        if (!success1) {\n            revert Lottery__PlayerLTKTransferToLotteryFailed(\n                address(this),\n                ltkAmount\n            );\n        }\n        // set Player due USDC\n        // TODO : uint256 amountDueToPlayer = getUSDCAmountDueToPlayer(msg.sender);\n        // BELOW simplified version\n        uint256 amountDueToPlayer = playerNumTickets * i_lotteryTicketPrice; // withOut interests\n        // transfer USDC due amount to Player\n        bool success = usdc.transfer(msg.sender, amountDueToPlayer); // address recipient, uint256 amount\n        if (!success) {\n            revert Lottery__PlayerWithdrawLotteryFailed();\n        }\n        // reset\n        s_totalNumTickets -= playerToNumTickets[msg.sender];\n        playerToNumTickets[msg.sender] = 0;\n        emit UserWithdraw(msg.sender, amountDueToPlayer);\n    }\n\n    /**\n     * @dev function called by the ChainLink Keeper (\"Automation\") nodes\n     * ChainLink Keeper look for \"upkeepNeeded\" to return true\n     * 2 possible paths\n     * -I.\n     * --To return true the following is needed\n     * ---1. Lottery state == \"OPEN_TO_PLAY\"\n     * ---2. Lottery Time interval to Play has passed\n     * ---3. Lottery has >= 1player, and Lottery is funded\n     * ---4. ChainLink subscription has enough LINK\n     * -II.\n     * --To return true the following is needed\n     * ---1. Lottery state == \"OPEN_TO_WITHDRAW\"\n     * ---2. Lottery Time interval to WithDraw has Passed\n     */\n    function checkUpkeep(bytes memory checkData)\n        public\n        view\n        override\n        returns (bool upkeepNeeded, bytes memory performData)\n    {\n        // path 01\n        if (keccak256(checkData) == keccak256(hex\"01\")) {\n            bool isOPEN_TO_PLAY = (s_lotteryState == LotteryState.OPEN_TO_PLAY);\n            bool timePassed = block.timestamp > s_endPlayTime;\n            bool hasPlayer = (s_players.length > 0);\n            bool isFunded = (address(this).balance > 0);\n            upkeepNeeded = (isOPEN_TO_PLAY &&\n                timePassed &&\n                hasPlayer &&\n                isFunded);\n            performData = checkData;\n        }\n        // path 02\n        if (keccak256(checkData) == keccak256(hex\"02\")) {\n            bool isOPEN_TO_WITHDRAW = (s_lotteryState ==\n                LotteryState.OPEN_TO_WITHDRAW);\n            bool timeToWithDrawPassed = (block.timestamp >= s_endWithDrawTime);\n            upkeepNeeded = (isOPEN_TO_WITHDRAW && timeToWithDrawPassed);\n            performData = checkData;\n        }\n    }\n\n    /**\n     * @dev function called by the ChainLink Keeper (\"Automation\") nodes when checkUpkeep() returned true.\n     * 2 possible paths\n     * If upkeepNeeded is true:\n     * -I. from path 01:\n     * --I.1 a request for randomness is made to ChainLink VRF\n     * --I.2 LotteryState switch => CALCULATING)\n     * --I.3 a call is made by Lottery to Coumpound to transfer all available USDC => Lottery\n     * -II. from path 02:\n     * --II.1 LotteryState switch => OPEN_TO_PLAY\n     * --II.2 Supply Coumpound with ALL Lottery USDC balance\n     */\n    function performUpkeep(bytes memory performData) external override {\n        // upkeep revalidation whatever the path\n        (bool upkeepNeeded, ) = checkUpkeep(performData);\n        if (!upkeepNeeded) {\n            revert Lottery__UpKeepNotNeeded(\n                address(this).balance,\n                s_players.length,\n                uint256(s_lotteryState)\n            );\n        }\n        // path 01\n        if (keccak256(performData) == keccak256(hex\"01\")) {\n            // reset s_endPlayTime to prevent checkUpKeep01 to return true before next run\n            s_endPlayTime = i_MAX_INT;\n            // switch LotteryState OPEN_TO_PLAY => CALCULATING\n            s_lotteryState = LotteryState.CALCULATING;\n            // request the random number from ChainLink VRF\n            uint256 requestId = i_vrfCoordinator.requestRandomWords(\n                i_gasLane,\n                i_subscriptionId,\n                REQUEST_CONFIRMATIONS,\n                i_callbackGasLimit,\n                NUMWORDS\n            );\n            // call Coumpound to transfer all available USDC => Lottery\n            withdrawfromCompound();\n            emit RandomWinnerRequested(requestId);\n            emit SwitchToCalculating(block.timestamp);\n        }\n        // path 02\n        if (keccak256(performData) == keccak256(hex\"02\")) {\n            // switch LotteryState OPEN_TO_WITHDRAW => OPEN_TO_PLAY\n            s_lotteryState = LotteryState.OPEN_TO_PLAY;\n            // supply Coumpound with ALL Lottery USDC balance\n            approveAndSupplyCompoundForALLUsd();\n            emit SwitchToOpenToPlay(block.timestamp);\n        }\n    }\n\n    /**\n     * @dev function called by the ChainLink nodes\n     * After the request for randomness is made, a Chainlink Node call its own fulfillRandomWords to run off-chain calculation => randomWords.\n     * Then, a Chainlink Node call our fulfillRandomWords (on-chain) and pass to it the requestId and the randomWords.\n     * Picks Address Winner\n     * Transfer Winner USDC GAINS to its wallet\n     * All Players (including Winner) keep their USDC (all without gains) in Lottery for next run. Also, all Players (including Winner) keep their Lottery Tokens until they withdraw all their USDC.\n     */\n    function fulfillRandomWords(\n        uint256, /* requestId */\n        uint256[] memory randomWords\n    ) internal override {\n        // set Winner\n        uint256 indexOfWinner = randomWords[0] % s_players.length; // to get a \"random word\" belonging to [0, players.length-1]. note: randomWords[0] for we expect only 1 \"random word\" (NUMWORDS = 1).\n        address newWinner = s_players[indexOfWinner];\n        s_newWinner = newWinner;\n        s_winners.push(newWinner);\n        s_lastTimeStamp = block.timestamp;\n        // set Winner GAINS\n        uint256 lotteryBaseUSDCValue = s_totalNumTickets * i_lotteryTicketPrice; // withOut interests\n        uint256 lotteryCurrentUSDCBalance = getLotteryUSDCBalance(); // with interests\n        // check if GAINS > 0\n        if (lotteryCurrentUSDCBalance > lotteryBaseUSDCValue) {\n            s_newPrize = lotteryCurrentUSDCBalance - lotteryBaseUSDCValue;\n            // transfer GAINS to Winner\n            bool success = usdc.transfer(newWinner, s_newPrize);\n            if (!success) {\n                revert Lottery__TransferGainsToWinnerFailed();\n            }\n        } else {\n            s_newPrize = 0;\n        }\n        // reset Players array\n        s_players = new address[](0);\n        // switch LotteryState CALCULATING => OPEN_TO_WITHDRAW\n        s_lotteryState = LotteryState.OPEN_TO_WITHDRAW;\n        //\n        // set next endWithDrawTime\n        s_endWithDrawTime = block.timestamp + i_intervalWithdraw;\n        //\n        emit WinnerPicked(s_newWinner, s_newPrize, block.timestamp);\n        emit SwitchToOpenToWithDraw(block.timestamp);\n    }\n\n    /* View/Pure functions */\n    /**\n     * @notice Getter for front end\n     * returns the entrance fee\n     */\n    function getLotteryFee() external view returns (uint256) {\n        return i_lotteryFee;\n    }\n\n    /**\n     * @notice Getter for front end\n     * returns the lottery Ticket Price\n     */\n    function getLotteryTicketPrice() external view returns (uint256) {\n        return i_lotteryTicketPrice;\n    }\n\n    /**\n     * @notice Getter for front end\n     * returns the number of Lottery Tokens Minted on LTK deployment\n     */\n    function getLTKMintInit() external view returns (uint256) {\n        return i_initLTKAmount;\n    }\n\n    /**\n     * @notice Getter for front end\n     */\n    function getLotteryState() external view returns (uint256) {\n        return uint256(s_lotteryState);\n    }\n\n    /**\n     * @notice Getter for front end\n     */\n    function getIsFirstPlayer() external view returns (bool) {\n        return s_isFirstPlayer;\n    }\n\n    /**\n     * @notice Getter for front end\n     * returns the Lottery round duration\n     */\n    function getInterval() external view returns (uint256) {\n        return i_interval;\n    }\n\n    /**\n     * @notice Getter for front end\n     * returns the current Lottery round endPlayTime\n     */\n    function getEndPlayTime() external view returns (uint256) {\n        return s_endPlayTime;\n    }\n\n    /**\n     * @notice Getter for front end\n     * returns the current Lottery round endWithDrawTime\n     */\n    function getEndWithDrawTime() external view returns (uint256) {\n        return s_endWithDrawTime;\n    }\n\n    /**\n     * @notice Getter\n     * returns the total number of active tickets\n     */\n    function getTotalNumTickets() external view returns (uint256) {\n        return s_totalNumTickets;\n    }\n\n    /**\n     * @notice Getter for front end\n     * returns the players array\n     */\n    function getPlayers() external view returns (address[] memory) {\n        return s_players;\n    }\n\n    /**\n     * @notice Getter\n     * returns the Player's number of tickets\n     */\n    function getPlayerNumberOfTickets(address _player)\n        external\n        view\n        returns (uint256)\n    {\n        return playerToNumTickets[_player];\n    }\n\n    /**\n     * @notice Getter for front end\n     * returns the winners array\n     */\n    function getWinners() external view returns (address[] memory) {\n        return s_winners;\n    }\n\n    /**\n     * @notice Getter for front end\n     */\n    function getNewWinnerPrize() external view returns (uint256) {\n        return s_newPrize;\n    }\n\n    /**\n     * @notice Getter for front end\n     */\n    function getLatestTimeStamp() external view returns (uint256) {\n        return s_lastTimeStamp;\n    }\n\n    /**\n     * @notice Getter\n     * returns the Lottery USDC current balance (available on Lottery)\n     */\n    function getLotteryUSDCBalance() public view returns (uint256) {\n        uint256 lotteryUSDCBalance = uint256(usdc.balanceOf(address(this)));\n        return lotteryUSDCBalance;\n    }\n\n    /**\n     * @notice Getter\n     * returns the Lottery USDC amount available on Compound\n     */\n    function getLotteryUSDCBalanceOnCompound()\n        public\n        view\n        returns (uint128 balance)\n    {\n        balance = uint128(comet.balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Getter\n     * returns the USDC amount due to Player\n     */\n    function getUSDCAmountDueToPlayer(address _player)\n        public\n        view\n        returns (uint256)\n    {\n        uint256 playerNumTickets = playerToNumTickets[_player];\n        uint256 amountDueToPlayer;\n        uint256 playerBaseUSDCValue = playerNumTickets * i_lotteryTicketPrice; // Player USDC total deposit\n        uint256 lotteryBaseUSDCValue = s_totalNumTickets * i_lotteryTicketPrice; // withOut potential interests from Compound\n        uint256 lotteryCurrentUSDCBalance = getLotteryUSDCBalance(); // with potential interests\n        if (lotteryCurrentUSDCBalance > lotteryBaseUSDCValue) {\n            // if Compound gives positive returns\n            uint256 userRatio = (playerNumTickets * 10**18) / s_totalNumTickets;\n            amountDueToPlayer =\n                (userRatio * lotteryCurrentUSDCBalance) /\n                10**18;\n        } else {\n            amountDueToPlayer = playerBaseUSDCValue;\n        }\n        return amountDueToPlayer;\n    }\n\n    /**\n     * @notice Getter for front end\n     */\n    function getRequestConfirmations() external pure returns (uint256) {\n        return REQUEST_CONFIRMATIONS;\n    }\n\n    /**\n     * @notice Getter for front end\n     */\n    function getNumWords() external pure returns (uint256) {\n        return NUMWORDS;\n    }\n\n    /**\n     * @notice Getter\n     * returns the admin address\n     */\n    function getAdmin() external view returns (address) {\n        return i_owner;\n    }\n\n    /**\n     * @notice function called by Admin\n     * 1. approve Compound for all current Lottery USDC balance\n     * 2. all current Lottery USDC balance --> supply Compound\n     */\n    function adminApproveAndSupplyCompound() external onlyOwner onlyOpenToPlay {\n        approveAndSupplyCompoundForALLUsd();\n    }\n\n    /**\n     * @notice function for Admin\n     * transfers Lottery ETH to Admin\n     */\n    function adminWithdrawETH() external onlyOwner {\n        (bool success, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        if (!success) {\n            revert Lottery__AdminWithdrawETHFailed();\n        }\n    }\n\n    /**\n     * @notice function for Admin\n     * Emergency. --> Trade-off: need to trust Admin.\n     * transfer all available USDC from Compound => Lottery\n     * /!\\ transfer Lottery USDC to Admin\n     */\n    function adminWithdrawUSDC() external onlyOwner {\n        uint128 availableUSDC = getLotteryUSDCBalanceOnCompound();\n        if (availableUSDC != 0) {\n            comet.withdraw(address(usdc), availableUSDC);\n        }\n        s_isFirstPlayer = true;\n        uint256 lotteryUSDCBalance = getLotteryUSDCBalance();\n        if (lotteryUSDCBalance != 0) {\n            bool success = usdc.transfer(msg.sender, lotteryUSDCBalance);\n            if (!success) {\n                revert Lottery__AdminWithdrawUSDCFailed();\n            }\n        }\n    }\n\n    /* Functions fallbacks */\n    receive() external payable {\n        enterLottery();\n    }\n\n    fallback() external payable {\n        enterLottery();\n    }\n}\n"
    },
    "contracts/LotteryToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract LotteryToken is ERC20, ERC20Burnable, Ownable {\n    constructor(uint256 _initSupply) ERC20(\"LotteryToken\", \"LTK\") {\n        _mint(msg.sender, _initSupply);\n    }\n\n    function mint(address to, uint256 amount) public onlyOwner {\n        _mint(to, amount);\n    }\n}\n"
    },
    "contracts/interfaces/IComet.sol": {
      "content": "//SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nlibrary CometStructs {\n    struct AssetInfo {\n        uint8 offset;\n        address asset;\n        address priceFeed;\n        uint64 scale;\n        uint64 borrowCollateralFactor;\n        uint64 liquidateCollateralFactor;\n        uint64 liquidationFactor;\n        uint128 supplyCap;\n    }\n\n    struct UserBasic {\n        int104 principal;\n        uint64 baseTrackingIndex;\n        uint64 baseTrackingAccrued;\n        uint16 assetsIn;\n        uint8 _reserved;\n    }\n\n    struct TotalsBasic {\n        uint64 baseSupplyIndex;\n        uint64 baseBorrowIndex;\n        uint64 trackingSupplyIndex;\n        uint64 trackingBorrowIndex;\n        uint104 totalSupplyBase;\n        uint104 totalBorrowBase;\n        uint40 lastAccrualTime;\n        uint8 pauseFlags;\n    }\n\n    struct UserCollateral {\n        uint128 balance;\n        uint128 _reserved;\n    }\n\n    struct RewardOwed {\n        address token;\n        uint owed;\n    }\n\n    struct TotalsCollateral {\n        uint128 totalSupplyAsset;\n        uint128 _reserved;\n    }\n}\n\ninterface Comet {\n    function balanceOf(address account) external view returns (uint256);\n\n    function collateralBalanceOf(address account, address asset)\n        external\n        view\n        returns (uint128);\n\n    function baseScale() external view returns (uint);\n\n    function supply(address asset, uint amount) external;\n\n    function withdraw(address asset, uint amount) external;\n\n    function getSupplyRate(uint utilization) external view returns (uint);\n\n    function getBorrowRate(uint utilization) external view returns (uint);\n\n    function getAssetInfoByAddress(address asset)\n        external\n        view\n        returns (CometStructs.AssetInfo memory);\n\n    function getAssetInfo(uint8 i)\n        external\n        view\n        returns (CometStructs.AssetInfo memory);\n\n    function getPrice(address priceFeed) external view returns (uint128);\n\n    function userBasic(address)\n        external\n        view\n        returns (CometStructs.UserBasic memory);\n\n    function totalsBasic()\n        external\n        view\n        returns (CometStructs.TotalsBasic memory);\n\n    function userCollateral(address, address)\n        external\n        view\n        returns (CometStructs.UserCollateral memory);\n\n    function baseTokenPriceFeed() external view returns (address);\n\n    function numAssets() external view returns (uint8);\n\n    function getUtilization() external view returns (uint);\n\n    function baseTrackingSupplySpeed() external view returns (uint);\n\n    function baseTrackingBorrowSpeed() external view returns (uint);\n\n    function totalSupply() external view returns (uint256);\n\n    function totalBorrow() external view returns (uint256);\n\n    function baseIndexScale() external pure returns (uint64);\n\n    function totalsCollateral(address asset)\n        external\n        view\n        returns (CometStructs.TotalsCollateral memory);\n\n    function baseMinForRewards() external view returns (uint256);\n\n    function baseToken() external view returns (address);\n}\n\ninterface CometRewards {\n    function getRewardOwed(address comet, address account)\n        external\n        returns (CometStructs.RewardOwed memory);\n\n    function claim(\n        address comet,\n        address src,\n        bool shouldAccrue\n    ) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n        }\n        _balances[to] += amount;\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\n/**\n * @notice This is a deprecated interface. Please use AutomationCompatibleInterface directly.\n */\npragma solidity ^0.8.0;\nimport {AutomationCompatibleInterface as KeeperCompatibleInterface} from \"./AutomationCompatibleInterface.sol\";\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        _spendAllowance(account, _msgSender(), amount);\n        _burn(account, amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AutomationCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// A mock for testing code that relies on VRFCoordinatorV2.\npragma solidity ^0.8.4;\n\nimport \"../interfaces/LinkTokenInterface.sol\";\nimport \"../interfaces/VRFCoordinatorV2Interface.sol\";\nimport \"../VRFConsumerBaseV2.sol\";\n\ncontract VRFCoordinatorV2Mock is VRFCoordinatorV2Interface {\n  uint96 public immutable BASE_FEE;\n  uint96 public immutable GAS_PRICE_LINK;\n  uint16 public immutable MAX_CONSUMERS = 100;\n\n  error InvalidSubscription();\n  error InsufficientBalance();\n  error MustBeSubOwner(address owner);\n  error TooManyConsumers();\n  error InvalidConsumer();\n  error InvalidRandomWords();\n\n  event RandomWordsRequested(\n    bytes32 indexed keyHash,\n    uint256 requestId,\n    uint256 preSeed,\n    uint64 indexed subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords,\n    address indexed sender\n  );\n  event RandomWordsFulfilled(uint256 indexed requestId, uint256 outputSeed, uint96 payment, bool success);\n  event SubscriptionCreated(uint64 indexed subId, address owner);\n  event SubscriptionFunded(uint64 indexed subId, uint256 oldBalance, uint256 newBalance);\n  event SubscriptionCanceled(uint64 indexed subId, address to, uint256 amount);\n  event ConsumerAdded(uint64 indexed subId, address consumer);\n  event ConsumerRemoved(uint64 indexed subId, address consumer);\n\n  uint64 s_currentSubId;\n  uint256 s_nextRequestId = 1;\n  uint256 s_nextPreSeed = 100;\n  struct Subscription {\n    address owner;\n    uint96 balance;\n  }\n  mapping(uint64 => Subscription) s_subscriptions; /* subId */ /* subscription */\n  mapping(uint64 => address[]) s_consumers; /* subId */ /* consumers */\n\n  struct Request {\n    uint64 subId;\n    uint32 callbackGasLimit;\n    uint32 numWords;\n  }\n  mapping(uint256 => Request) s_requests; /* requestId */ /* request */\n\n  constructor(uint96 _baseFee, uint96 _gasPriceLink) {\n    BASE_FEE = _baseFee;\n    GAS_PRICE_LINK = _gasPriceLink;\n  }\n\n  function consumerIsAdded(uint64 _subId, address _consumer) public view returns (bool) {\n    address[] memory consumers = s_consumers[_subId];\n    for (uint256 i = 0; i < consumers.length; i++) {\n      if (consumers[i] == _consumer) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  modifier onlyValidConsumer(uint64 _subId, address _consumer) {\n    if (!consumerIsAdded(_subId, _consumer)) {\n      revert InvalidConsumer();\n    }\n    _;\n  }\n\n  /**\n   * @notice fulfillRandomWords fulfills the given request, sending the random words to the supplied\n   * @notice consumer.\n   *\n   * @dev This mock uses a simplified formula for calculating payment amount and gas usage, and does\n   * @dev not account for all edge cases handled in the real VRF coordinator. When making requests\n   * @dev against the real coordinator a small amount of additional LINK is required.\n   *\n   * @param _requestId the request to fulfill\n   * @param _consumer the VRF randomness consumer to send the result to\n   */\n  function fulfillRandomWords(uint256 _requestId, address _consumer) external {\n    fulfillRandomWordsWithOverride(_requestId, _consumer, new uint256[](0));\n  }\n\n  /**\n   * @notice fulfillRandomWordsWithOverride allows the user to pass in their own random words.\n   *\n   * @param _requestId the request to fulfill\n   * @param _consumer the VRF randomness consumer to send the result to\n   * @param _words user-provided random words\n   */\n  function fulfillRandomWordsWithOverride(\n    uint256 _requestId,\n    address _consumer,\n    uint256[] memory _words\n  ) public {\n    uint256 startGas = gasleft();\n    if (s_requests[_requestId].subId == 0) {\n      revert(\"nonexistent request\");\n    }\n    Request memory req = s_requests[_requestId];\n\n    if (_words.length == 0) {\n      _words = new uint256[](req.numWords);\n      for (uint256 i = 0; i < req.numWords; i++) {\n        _words[i] = uint256(keccak256(abi.encode(_requestId, i)));\n      }\n    } else if (_words.length != req.numWords) {\n      revert InvalidRandomWords();\n    }\n\n    VRFConsumerBaseV2 v;\n    bytes memory callReq = abi.encodeWithSelector(v.rawFulfillRandomWords.selector, _requestId, _words);\n    (bool success, ) = _consumer.call{gas: req.callbackGasLimit}(callReq);\n\n    uint96 payment = uint96(BASE_FEE + ((startGas - gasleft()) * GAS_PRICE_LINK));\n    if (s_subscriptions[req.subId].balance < payment) {\n      revert InsufficientBalance();\n    }\n    s_subscriptions[req.subId].balance -= payment;\n    delete (s_requests[_requestId]);\n    emit RandomWordsFulfilled(_requestId, _requestId, payment, success);\n  }\n\n  /**\n   * @notice fundSubscription allows funding a subscription with an arbitrary amount for testing.\n   *\n   * @param _subId the subscription to fund\n   * @param _amount the amount to fund\n   */\n  function fundSubscription(uint64 _subId, uint96 _amount) public {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    uint96 oldBalance = s_subscriptions[_subId].balance;\n    s_subscriptions[_subId].balance += _amount;\n    emit SubscriptionFunded(_subId, oldBalance, oldBalance + _amount);\n  }\n\n  function requestRandomWords(\n    bytes32 _keyHash,\n    uint64 _subId,\n    uint16 _minimumRequestConfirmations,\n    uint32 _callbackGasLimit,\n    uint32 _numWords\n  ) external override onlyValidConsumer(_subId, msg.sender) returns (uint256) {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n\n    uint256 requestId = s_nextRequestId++;\n    uint256 preSeed = s_nextPreSeed++;\n\n    s_requests[requestId] = Request({subId: _subId, callbackGasLimit: _callbackGasLimit, numWords: _numWords});\n\n    emit RandomWordsRequested(\n      _keyHash,\n      requestId,\n      preSeed,\n      _subId,\n      _minimumRequestConfirmations,\n      _callbackGasLimit,\n      _numWords,\n      msg.sender\n    );\n    return requestId;\n  }\n\n  function createSubscription() external override returns (uint64 _subId) {\n    s_currentSubId++;\n    s_subscriptions[s_currentSubId] = Subscription({owner: msg.sender, balance: 0});\n    emit SubscriptionCreated(s_currentSubId, msg.sender);\n    return s_currentSubId;\n  }\n\n  function getSubscription(uint64 _subId)\n    external\n    view\n    override\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    )\n  {\n    if (s_subscriptions[_subId].owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    return (s_subscriptions[_subId].balance, 0, s_subscriptions[_subId].owner, s_consumers[_subId]);\n  }\n\n  function cancelSubscription(uint64 _subId, address _to) external override onlySubOwner(_subId) {\n    emit SubscriptionCanceled(_subId, _to, s_subscriptions[_subId].balance);\n    delete (s_subscriptions[_subId]);\n  }\n\n  modifier onlySubOwner(uint64 _subId) {\n    address owner = s_subscriptions[_subId].owner;\n    if (owner == address(0)) {\n      revert InvalidSubscription();\n    }\n    if (msg.sender != owner) {\n      revert MustBeSubOwner(owner);\n    }\n    _;\n  }\n\n  function getRequestConfig()\n    external\n    pure\n    override\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    )\n  {\n    return (3, 2000000, new bytes32[](0));\n  }\n\n  function addConsumer(uint64 _subId, address _consumer) external override onlySubOwner(_subId) {\n    if (s_consumers[_subId].length == MAX_CONSUMERS) {\n      revert TooManyConsumers();\n    }\n\n    if (consumerIsAdded(_subId, _consumer)) {\n      return;\n    }\n\n    s_consumers[_subId].push(_consumer);\n    emit ConsumerAdded(_subId, _consumer);\n  }\n\n  function removeConsumer(uint64 _subId, address _consumer)\n    external\n    override\n    onlySubOwner(_subId)\n    onlyValidConsumer(_subId, _consumer)\n  {\n    address[] storage consumers = s_consumers[_subId];\n    for (uint256 i = 0; i < consumers.length; i++) {\n      if (consumers[i] == _consumer) {\n        address last = consumers[consumers.length - 1];\n        consumers[i] = last;\n        consumers.pop();\n        break;\n      }\n    }\n\n    emit ConsumerRemoved(_subId, _consumer);\n  }\n\n  function getConfig()\n    external\n    view\n    returns (\n      uint16 minimumRequestConfirmations,\n      uint32 maxGasLimit,\n      uint32 stalenessSeconds,\n      uint32 gasAfterPaymentCalculation\n    )\n  {\n    return (4, 2_500_000, 2_700, 33285);\n  }\n\n  function getFeeConfig()\n    external\n    view\n    returns (\n      uint32 fulfillmentFlatFeeLinkPPMTier1,\n      uint32 fulfillmentFlatFeeLinkPPMTier2,\n      uint32 fulfillmentFlatFeeLinkPPMTier3,\n      uint32 fulfillmentFlatFeeLinkPPMTier4,\n      uint32 fulfillmentFlatFeeLinkPPMTier5,\n      uint24 reqsForTier2,\n      uint24 reqsForTier3,\n      uint24 reqsForTier4,\n      uint24 reqsForTier5\n    )\n  {\n    return (\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      100000, // 0.1 LINK\n      0,\n      0,\n      0,\n      0\n    );\n  }\n\n  function getFallbackWeiPerUnitLink() external view returns (int256) {\n    return 4000000000000000; // 0.004 Ether\n  }\n\n  function requestSubscriptionOwnerTransfer(uint64 _subId, address _newOwner) external pure override {\n    revert(\"not implemented\");\n  }\n\n  function acceptSubscriptionOwnerTransfer(uint64 _subId) external pure override {\n    revert(\"not implemented\");\n  }\n\n  function pendingRequestExists(uint64 subId) public view override returns (bool) {\n    revert(\"not implemented\");\n  }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface LinkTokenInterface {\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\n\n  function approve(address spender, uint256 value) external returns (bool success);\n\n  function balanceOf(address owner) external view returns (uint256 balance);\n\n  function decimals() external view returns (uint8 decimalPlaces);\n\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\n\n  function increaseApproval(address spender, uint256 subtractedValue) external;\n\n  function name() external view returns (string memory tokenName);\n\n  function symbol() external view returns (string memory tokenSymbol);\n\n  function totalSupply() external view returns (uint256 totalTokensIssued);\n\n  function transfer(address to, uint256 value) external returns (bool success);\n\n  function transferAndCall(\n    address to,\n    uint256 value,\n    bytes calldata data\n  ) external returns (bool success);\n\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  ) external returns (bool success);\n}\n"
    },
    "contracts/test/VRFCoordinatorV2Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// A mock for testing code that relies on VRFCoordinatorV2.\npragma solidity ^0.8.4;\n\nimport \"@chainlink/contracts/src/v0.8/mocks/VRFCoordinatorV2Mock.sol\";\n"
    },
    "contracts/test/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// mock class using ERC20\ncontract ERC20Mock is ERC20 {\n    constructor(\n        string memory name,\n        string memory symbol,\n        address initialAccount,\n        uint256 initialBalance\n    ) payable ERC20(name, symbol) {\n        _mint(initialAccount, initialBalance);\n    }\n\n    function mint(address account, uint256 amount) public {\n        _mint(account, amount);\n    }\n\n    function burn(address account, uint256 amount) public {\n        _burn(account, amount);\n    }\n\n    function transferInternal(\n        address from,\n        address to,\n        uint256 value\n    ) public {\n        _transfer(from, to, value);\n    }\n\n    function approveInternal(\n        address owner,\n        address spender,\n        uint256 value\n    ) public {\n        _approve(owner, spender, value);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}